//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.2-SNAPSHOT
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from D:\Users\Admin\Source\Repos\ANTLR Test\ANTLR Test\Calc.g4 by ANTLR 4.2-SNAPSHOT

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

namespace ANTLR_Test {

	using System;
	using System.Collections;

using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.2-SNAPSHOT")]
[System.CLSCompliant(false)]
public partial class CalcParser : Parser {
	public const int
		T__6=1, T__5=2, T__4=3, T__3=4, T__2=5, T__1=6, T__0=7, NEWLINE=8, ID=9, 
		INT=10;
	public static readonly string[] tokenNames = {
		"<INVALID>", "')'", "'+'", "'-'", "'*'", "'('", "'/'", "'='", "NEWLINE", 
		"ID", "INT"
	};
	public const int
		RULE_statement = 0, RULE_calc = 1, RULE_expr = 2, RULE_multExpression = 3, 
		RULE_atom = 4;
	public static readonly string[] ruleNames = {
		"statement", "calc", "expr", "multExpression", "atom"
	};

	public override string GrammarFileName { get { return "Calc.g4"; } }

	public override string[] TokenNames { get { return tokenNames; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }


		Hashtable memory = new Hashtable();

	public CalcParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class StatementContext : ParserRuleContext {
		public ExprContext _expr;
		public IToken _ID;
		public ITerminalNode NEWLINE() { return GetToken(CalcParser.NEWLINE, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode ID() { return GetToken(CalcParser.ID, 0); }
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_statement; }
		public override void EnterRule(IParseTreeListener listener) {
			ICalcListener typedListener = listener as ICalcListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICalcListener typedListener = listener as ICalcListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalcVisitor<TResult> typedVisitor = visitor as ICalcVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_statement);
		try {
			State = 21;
			switch ( Interpreter.AdaptivePredict(_input,0,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 10; _localctx._expr = expr();
				State = 11; Match(NEWLINE);
				 Console.WriteLine(_localctx._expr.value); 
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 14; _localctx._ID = Match(ID);
				State = 15; Match(7);
				State = 16; _localctx._expr = expr();
				State = 17; Match(NEWLINE);
				 memory.Add((_localctx._ID!=null?_localctx._ID.Text:null), _localctx._expr.value); 
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 20; Match(NEWLINE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CalcContext : ParserRuleContext {
		public IReadOnlyList<StatementContext> statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public CalcContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_calc; }
		public override void EnterRule(IParseTreeListener listener) {
			ICalcListener typedListener = listener as ICalcListener;
			if (typedListener != null) typedListener.EnterCalc(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICalcListener typedListener = listener as ICalcListener;
			if (typedListener != null) typedListener.ExitCalc(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalcVisitor<TResult> typedVisitor = visitor as ICalcVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCalc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CalcContext calc() {
		CalcContext _localctx = new CalcContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_calc);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 24;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 23; statement();
				}
				}
				State = 26;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << 5) | (1L << NEWLINE) | (1L << ID) | (1L << INT))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public int value;
		public MultExpressionContext me1;
		public MultExpressionContext me2;
		public IReadOnlyList<MultExpressionContext> multExpression() {
			return GetRuleContexts<MultExpressionContext>();
		}
		public MultExpressionContext multExpression(int i) {
			return GetRuleContext<MultExpressionContext>(i);
		}
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_expr; }
		public override void EnterRule(IParseTreeListener listener) {
			ICalcListener typedListener = listener as ICalcListener;
			if (typedListener != null) typedListener.EnterExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICalcListener typedListener = listener as ICalcListener;
			if (typedListener != null) typedListener.ExitExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalcVisitor<TResult> typedVisitor = visitor as ICalcVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		ExprContext _localctx = new ExprContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_expr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 28; _localctx.me1 = multExpression();
			_localctx.value =  me1;
			State = 40;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==2 || _la==3) {
				{
				State = 38;
				switch (_input.La(1)) {
				case 2:
					{
					State = 30; Match(2);
					State = 31; _localctx.me2 = multExpression();
					_localctx.value += _localctx.me2.value;
					}
					break;
				case 3:
					{
					State = 34; Match(3);
					State = 35; _localctx.me2 = multExpression();
					_localctx.value -= _localctx.me2.value;
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 42;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultExpressionContext : ParserRuleContext {
		public int value;
		public AtomContext a1;
		public AtomContext a2;
		public AtomContext atom(int i) {
			return GetRuleContext<AtomContext>(i);
		}
		public IReadOnlyList<AtomContext> atom() {
			return GetRuleContexts<AtomContext>();
		}
		public MultExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_multExpression; }
		public override void EnterRule(IParseTreeListener listener) {
			ICalcListener typedListener = listener as ICalcListener;
			if (typedListener != null) typedListener.EnterMultExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICalcListener typedListener = listener as ICalcListener;
			if (typedListener != null) typedListener.ExitMultExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalcVisitor<TResult> typedVisitor = visitor as ICalcVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultExpressionContext multExpression() {
		MultExpressionContext _localctx = new MultExpressionContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_multExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 43; _localctx.a1 = atom();
			_localctx.value =  _localctx.a1.value;
			State = 55;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==4 || _la==6) {
				{
				State = 53;
				switch (_input.La(1)) {
				case 4:
					{
					State = 45; Match(4);
					State = 46; _localctx.a2 = atom();
					_localctx.value *= _localctx.a2.value;
					}
					break;
				case 6:
					{
					State = 49; Match(6);
					State = 50; _localctx.a2 = atom();
					_localctx.value /= _localctx.a2.value;
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 57;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AtomContext : ParserRuleContext {
		public int value;
		public IToken _ID;
		public IToken _INT;
		public ExprContext _expr;
		public ITerminalNode INT() { return GetToken(CalcParser.INT, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode ID() { return GetToken(CalcParser.ID, 0); }
		public AtomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_atom; }
		public override void EnterRule(IParseTreeListener listener) {
			ICalcListener typedListener = listener as ICalcListener;
			if (typedListener != null) typedListener.EnterAtom(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICalcListener typedListener = listener as ICalcListener;
			if (typedListener != null) typedListener.ExitAtom(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalcVisitor<TResult> typedVisitor = visitor as ICalcVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AtomContext atom() {
		AtomContext _localctx = new AtomContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_atom);
		try {
			State = 67;
			switch (_input.La(1)) {
			case ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 58; _localctx._ID = Match(ID);
				_localctx.value =  (int)memory[(_localctx._ID!=null?_localctx._ID.Text:null)];
				}
				break;
			case INT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 60; _localctx._INT = Match(INT);
				_localctx.value =  int.Parse((_localctx._INT!=null?_localctx._INT.Text:null));
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 3);
				{
				State = 62; Match(5);
				State = 63; _localctx._expr = expr();
				State = 64; Match(1);
				_localctx.value =  _localctx._expr.value;
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\fH\x4\x2\t\x2\x4"+
		"\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2"+
		"\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x5\x2\x18\n\x2\x3\x3\x6\x3\x1B\n"+
		"\x3\r\x3\xE\x3\x1C\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3"+
		"\x4\x3\x4\a\x4)\n\x4\f\x4\xE\x4,\v\x4\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3"+
		"\x5\x3\x5\x3\x5\x3\x5\x3\x5\a\x5\x38\n\x5\f\x5\xE\x5;\v\x5\x3\x6\x3\x6"+
		"\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x5\x6\x46\n\x6\x3\x6\x2\x2"+
		"\x2\a\x2\x2\x4\x2\x6\x2\b\x2\n\x2\x2\x2K\x2\x17\x3\x2\x2\x2\x4\x1A\x3"+
		"\x2\x2\x2\x6\x1E\x3\x2\x2\x2\b-\x3\x2\x2\x2\n\x45\x3\x2\x2\x2\f\r\x5\x6"+
		"\x4\x2\r\xE\a\n\x2\x2\xE\xF\b\x2\x1\x2\xF\x18\x3\x2\x2\x2\x10\x11\a\v"+
		"\x2\x2\x11\x12\a\t\x2\x2\x12\x13\x5\x6\x4\x2\x13\x14\a\n\x2\x2\x14\x15"+
		"\b\x2\x1\x2\x15\x18\x3\x2\x2\x2\x16\x18\a\n\x2\x2\x17\f\x3\x2\x2\x2\x17"+
		"\x10\x3\x2\x2\x2\x17\x16\x3\x2\x2\x2\x18\x3\x3\x2\x2\x2\x19\x1B\x5\x2"+
		"\x2\x2\x1A\x19\x3\x2\x2\x2\x1B\x1C\x3\x2\x2\x2\x1C\x1A\x3\x2\x2\x2\x1C"+
		"\x1D\x3\x2\x2\x2\x1D\x5\x3\x2\x2\x2\x1E\x1F\x5\b\x5\x2\x1F*\b\x4\x1\x2"+
		" !\a\x4\x2\x2!\"\x5\b\x5\x2\"#\b\x4\x1\x2#)\x3\x2\x2\x2$%\a\x5\x2\x2%"+
		"&\x5\b\x5\x2&\'\b\x4\x1\x2\')\x3\x2\x2\x2( \x3\x2\x2\x2($\x3\x2\x2\x2"+
		"),\x3\x2\x2\x2*(\x3\x2\x2\x2*+\x3\x2\x2\x2+\a\x3\x2\x2\x2,*\x3\x2\x2\x2"+
		"-.\x5\n\x6\x2.\x39\b\x5\x1\x2/\x30\a\x6\x2\x2\x30\x31\x5\n\x6\x2\x31\x32"+
		"\b\x5\x1\x2\x32\x38\x3\x2\x2\x2\x33\x34\a\b\x2\x2\x34\x35\x5\n\x6\x2\x35"+
		"\x36\b\x5\x1\x2\x36\x38\x3\x2\x2\x2\x37/\x3\x2\x2\x2\x37\x33\x3\x2\x2"+
		"\x2\x38;\x3\x2\x2\x2\x39\x37\x3\x2\x2\x2\x39:\x3\x2\x2\x2:\t\x3\x2\x2"+
		"\x2;\x39\x3\x2\x2\x2<=\a\v\x2\x2=\x46\b\x6\x1\x2>?\a\f\x2\x2?\x46\b\x6"+
		"\x1\x2@\x41\a\a\x2\x2\x41\x42\x5\x6\x4\x2\x42\x43\a\x3\x2\x2\x43\x44\b"+
		"\x6\x1\x2\x44\x46\x3\x2\x2\x2\x45<\x3\x2\x2\x2\x45>\x3\x2\x2\x2\x45@\x3"+
		"\x2\x2\x2\x46\v\x3\x2\x2\x2\t\x17\x1C(*\x37\x39\x45";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace ANTLR_Test
