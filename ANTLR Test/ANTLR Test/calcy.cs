// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, QUT 2005-2010
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.5.0
// Machine:  SERGEY303PC
// DateTime: 13.03.2014 23:28:51
// UserName: Сергей
// Input file <Calcy.y - 13.03.2014 23:28:43>

// options: lines

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Text;
using QUT.Gppg;

internal enum Tokens {error=125,EOF=126,
    DIGIT=127,UMINUS=128};

internal class Parser: ShiftReduceParser<int, LexLocation>
{
  // Verbatim content from Calcy.y - 13.03.2014 23:28:43
#line 2 "Calcy.y"
    int[] regs = new int[26];
#line 3 "Calcy.y"
    int _base;
  // End verbatim content from Calcy.y - 13.03.2014 23:28:43

#pragma warning disable 649
  private static Dictionary<int, string> aliasses;
#pragma warning restore 649
  private static Rule[] rules = new Rule[11];
  private static State[] states = new State[19];
  private static string[] nonTerms = new string[] {
      "expr", "$accept", "number", };

  static Parser() {
    states[0] = new State(new int[]{40,13,127,18},new int[]{-1,1,-3,16});
    states[1] = new State(new int[]{126,2,42,3,47,5,37,7,43,9,45,11});
    states[2] = new State(-1);
    states[3] = new State(new int[]{40,13,127,18},new int[]{-1,4,-3,16});
    states[4] = new State(-3);
    states[5] = new State(new int[]{40,13,127,18},new int[]{-1,6,-3,16});
    states[6] = new State(-4);
    states[7] = new State(new int[]{40,13,127,18},new int[]{-1,8,-3,16});
    states[8] = new State(-5);
    states[9] = new State(new int[]{40,13,127,18},new int[]{-1,10,-3,16});
    states[10] = new State(new int[]{42,3,47,5,37,7,43,-6,45,-6,126,-6,41,-6});
    states[11] = new State(new int[]{40,13,127,18},new int[]{-1,12,-3,16});
    states[12] = new State(new int[]{42,3,47,5,37,7,43,-7,45,-7,126,-7,41,-7});
    states[13] = new State(new int[]{40,13,127,18},new int[]{-1,14,-3,16});
    states[14] = new State(new int[]{41,15,42,3,47,5,37,7,43,9,45,11});
    states[15] = new State(-2);
    states[16] = new State(new int[]{127,17,126,-8,42,-8,47,-8,37,-8,43,-8,45,-8,41,-8});
    states[17] = new State(-10);
    states[18] = new State(-9);

    for (int sNo = 0; sNo < states.Length; sNo++) states[sNo].number = sNo;

    rules[1] = new Rule(-2, new int[]{-1,126});
    rules[2] = new Rule(-1, new int[]{40,-1,41});
    rules[3] = new Rule(-1, new int[]{-1,42,-1});
    rules[4] = new Rule(-1, new int[]{-1,47,-1});
    rules[5] = new Rule(-1, new int[]{-1,37,-1});
    rules[6] = new Rule(-1, new int[]{-1,43,-1});
    rules[7] = new Rule(-1, new int[]{-1,45,-1});
    rules[8] = new Rule(-1, new int[]{-3});
    rules[9] = new Rule(-3, new int[]{127});
    rules[10] = new Rule(-3, new int[]{-3,127});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Tokens.error, (int)Tokens.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
#pragma warning disable 162, 1522
    switch (action)
    {
      case 2: // expr -> '(', expr, ')'
#line 20 "Calcy.y"
{
#line 21 "Calcy.y"
                    CurrentSemanticValue = ValueStack[ValueStack.Depth-2];
#line 22 "Calcy.y"
                }
        break;
      case 3: // expr -> expr, '*', expr
#line 24 "Calcy.y"
{
#line 25 "Calcy.y"
                    CurrentSemanticValue = ValueStack[ValueStack.Depth-3] * ValueStack[ValueStack.Depth-1];
#line 26 "Calcy.y"
                }
        break;
      case 4: // expr -> expr, '/', expr
#line 28 "Calcy.y"
{
#line 29 "Calcy.y"
                    CurrentSemanticValue = ValueStack[ValueStack.Depth-3] / ValueStack[ValueStack.Depth-1];
#line 30 "Calcy.y"
                }
        break;
      case 5: // expr -> expr, '%', expr
#line 32 "Calcy.y"
{
#line 33 "Calcy.y"
                    CurrentSemanticValue = ValueStack[ValueStack.Depth-3] % ValueStack[ValueStack.Depth-1];
#line 34 "Calcy.y"
                }
        break;
      case 6: // expr -> expr, '+', expr
#line 36 "Calcy.y"
{
#line 37 "Calcy.y"
                    CurrentSemanticValue = ValueStack[ValueStack.Depth-3] + ValueStack[ValueStack.Depth-1];
#line 38 "Calcy.y"
                }
        break;
      case 7: // expr -> expr, '-', expr
#line 40 "Calcy.y"
{
#line 41 "Calcy.y"
                    CurrentSemanticValue = ValueStack[ValueStack.Depth-3] - ValueStack[ValueStack.Depth-1];
#line 42 "Calcy.y"
                }
        break;
      case 9: // number -> DIGIT
#line 47 "Calcy.y"
{
#line 48 "Calcy.y"
                    CurrentSemanticValue = ValueStack[ValueStack.Depth-1];
#line 49 "Calcy.y"
                    _base = (ValueStack[ValueStack.Depth-1]==0) ? 8 : 10;
#line 50 "Calcy.y"
                }
        break;
      case 10: // number -> number, DIGIT
#line 52 "Calcy.y"
{
#line 53 "Calcy.y"
                    CurrentSemanticValue = _base * ValueStack[ValueStack.Depth-2] + ValueStack[ValueStack.Depth-1];
#line 54 "Calcy.y"
                }
        break;
    }
#pragma warning restore 162, 1522
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliasses != null && aliasses.ContainsKey(terminal))
        return aliasses[terminal];
    else if (((Tokens)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Tokens)terminal).ToString();
    else
        return CharToString((char)terminal);
  }

#line 58 "Calcy.y"

#line 59 "Calcy.y"
    Parser() : base(null) { }
#line 60 "Calcy.y"

#line 61 "Calcy.y"
    static void Main2(string[] args)
#line 62 "Calcy.y"
    {
#line 63 "Calcy.y"
        DateTime s = DateTime.Now;
#line 64 "Calcy.y"

#line 65 "Calcy.y"
        Parser parser = new Parser();
#line 66 "Calcy.y"
        
#line 67 "Calcy.y"
        System.IO.TextReader reader;
#line 68 "Calcy.y"

#line 69 "Calcy.y"
            reader = new System.IO.StreamReader("../../inputTest.txt");
#line 70 "Calcy.y"

#line 71 "Calcy.y"
            
#line 72 "Calcy.y"
        parser.Scanner = new Lexer(reader);
#line 73 "Calcy.y"
        //parser.Trace = true;
#line 74 "Calcy.y"
        
#line 75 "Calcy.y"
        parser.Parse();
#line 76 "Calcy.y"
        Console.WriteLine((DateTime.Now-s).TotalMilliseconds);
#line 77 "Calcy.y"
    }
#line 78 "Calcy.y"

#line 79 "Calcy.y"

#line 80 "Calcy.y"
    /*
#line 81 "Calcy.y"
     * Copied from GPPG documentation.
#line 82 "Calcy.y"
     */
#line 83 "Calcy.y"
    class Lexer: QUT.Gppg.AbstractScanner<int,LexLocation>
#line 84 "Calcy.y"
    {
#line 85 "Calcy.y"
         private System.IO.TextReader reader;
#line 86 "Calcy.y"
    
#line 87 "Calcy.y"
         //
#line 88 "Calcy.y"
         // Version 1.2.0 needed the following code.
#line 89 "Calcy.y"
         // In V1.2.1 the base class provides this empty default.
#line 90 "Calcy.y"
         //
#line 91 "Calcy.y"
         // public override LexLocation yylloc { 
#line 92 "Calcy.y"
         //     get { return null; } 
#line 93 "Calcy.y"
         //     set { /* skip */; }
#line 94 "Calcy.y"
         // }
#line 95 "Calcy.y"
         //
#line 96 "Calcy.y"
    
#line 97 "Calcy.y"
         public Lexer(System.IO.TextReader reader)
#line 98 "Calcy.y"
         {
#line 99 "Calcy.y"
             this.reader = reader;
#line 100 "Calcy.y"
         }
#line 101 "Calcy.y"
    
#line 102 "Calcy.y"
         public override int yylex()
#line 103 "Calcy.y"
         {
#line 104 "Calcy.y"
             char ch;
#line 105 "Calcy.y"
             int ord = reader.Read();
#line 106 "Calcy.y"
             //
#line 107 "Calcy.y"
             // Must check for EOF
#line 108 "Calcy.y"
             //
#line 109 "Calcy.y"
             if (ord == -1)
#line 110 "Calcy.y"
                 return (int)Tokens.EOF;
#line 111 "Calcy.y"
             else
#line 112 "Calcy.y"
                 ch = (char)ord;
#line 113 "Calcy.y"
    
#line 114 "Calcy.y"
             if (ch == '\n')
#line 115 "Calcy.y"
                return ch;
#line 116 "Calcy.y"
             else if (char.IsWhiteSpace(ch))
#line 117 "Calcy.y"
                 return yylex();
#line 118 "Calcy.y"
             else if (char.IsDigit(ch))
#line 119 "Calcy.y"
             {
#line 120 "Calcy.y"
                 yylval = ch - '0';
#line 121 "Calcy.y"
                 return (int)Tokens.DIGIT;
#line 122 "Calcy.y"
             }            
#line 123 "Calcy.y"
             else
#line 124 "Calcy.y"
                 switch (ch)
#line 125 "Calcy.y"
                 {
#line 126 "Calcy.y"
                     case '+':
#line 127 "Calcy.y"
                     case '-':
#line 128 "Calcy.y"
                     case '*':
#line 129 "Calcy.y"
                     case '/':
#line 130 "Calcy.y"
                     case '(':
#line 131 "Calcy.y"
                     case ')':
#line 132 "Calcy.y"
                     case '%':
#line 133 "Calcy.y"
                     case '=':
#line 134 "Calcy.y"
                         return ch;
#line 135 "Calcy.y"
                     default:
#line 136 "Calcy.y"
                         Console.Error.WriteLine("Illegal character '{0}'", ch);
#line 137 "Calcy.y"
                         return yylex();
#line 138 "Calcy.y"
                 }
#line 139 "Calcy.y"
         }
#line 140 "Calcy.y"
    
#line 141 "Calcy.y"
         public override void yyerror(string format, params object[] args)
#line 142 "Calcy.y"
         {
#line 143 "Calcy.y"
             Console.Error.WriteLine(format, args);
#line 144 "Calcy.y"
         }
#line 145 "Calcy.y"
    }
}
