//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.2-SNAPSHOT
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from D:\Users\Admin\Source\Repos\ANTLR Test\ANTLR Test\sparql.g4 by ANTLR 4.2-SNAPSHOT

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

namespace ANTLR_Test {

	using System;
	using System.Xml.Linq;	
	using System.Collections;

using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.2-SNAPSHOT")]
[System.CLSCompliant(false)]
public partial class sparqlParser : Parser {
	public const int
		T__71=1, T__70=2, T__69=3, T__68=4, T__67=5, T__66=6, T__65=7, T__64=8, 
		T__63=9, T__62=10, T__61=11, T__60=12, T__59=13, T__58=14, T__57=15, T__56=16, 
		T__55=17, T__54=18, T__53=19, T__52=20, T__51=21, T__50=22, T__49=23, 
		T__48=24, T__47=25, T__46=26, T__45=27, T__44=28, T__43=29, T__42=30, 
		T__41=31, T__40=32, T__39=33, T__38=34, T__37=35, T__36=36, T__35=37, 
		T__34=38, T__33=39, T__32=40, T__31=41, T__30=42, T__29=43, T__28=44, 
		T__27=45, T__26=46, T__25=47, T__24=48, T__23=49, T__22=50, T__21=51, 
		T__20=52, T__19=53, T__18=54, T__17=55, T__16=56, T__15=57, T__14=58, 
		T__13=59, T__12=60, T__11=61, T__10=62, T__9=63, T__8=64, T__7=65, T__6=66, 
		T__5=67, T__4=68, T__3=69, T__2=70, T__1=71, T__0=72, NumericLiteralPositive=73, 
		NumericLiteralNegative=74, BooleanLiteral=75, String=76, BlankNode=77, 
		IRI_REF=78, PNAME_NS=79, PREFIXED_NAME=80, PNAME_LN=81, BLANK_NODE_LABEL=82, 
		VAR1=83, VAR2=84, LANGTAG=85, INTEGER=86, DECIMAL=87, DOUBLE=88, INTEGER_POSITIVE=89, 
		DECIMAL_POSITIVE=90, DOUBLE_POSITIVE=91, INTEGER_NEGATIVE=92, DECIMAL_NEGATIVE=93, 
		DOUBLE_NEGATIVE=94, EXPONENT=95, STRING_LITERAL1=96, STRING_LITERAL2=97, 
		STRING_LITERAL_LONG1=98, STRING_LITERAL_LONG2=99, ECHAR=100, NIL=101, 
		WS=102, ANON=103, PN_CHARS_BASE=104, PN_CHARS_U=105, VARNAME=106, PN_CHARS=107, 
		PN_PREFIX=108, PN_LOCAL=109;
	public static readonly string[] tokenNames = {
		"<INVALID>", "'DISTINCT'", "'isBLANK'", "'Langmatches'", "'['", "'WHERE'", 
		"'*'", "'FILTER'", "'<'", "'isIRI'", "'!='", "'<='", "'REGEX'", "'}'", 
		"'^^'", "'ORDER'", "'PREFIX'", "'LANGMATCHES'", "'langmatches'", "')'", 
		"'regex'", "'BOUND'", "'Bound'", "'langMatches'", "'DESC'", "'='", "'DATATYPE'", 
		"'STR'", "'dataType'", "'BASE'", "'datatype'", "'FROM'", "'sameTerm'", 
		"'str'", "'!'", "'SELECT'", "']'", "'OPTIONAL'", "'BY'", "','", "'OFFSET'", 
		"'ASC'", "'-'", "'('", "'Datatype'", "'DataType'", "'LangMatches'", "'isURI'", 
		"'{'", "'bound'", "'isLITERAL'", "'Lang'", "'ASK'", "'GRAPH'", "'a'", 
		"'.'", "'REDUCED'", "'+'", "';'", "'CONSTRUCT'", "'lang'", "'LANG'", "'&&'", 
		"'||'", "'>'", "'Regex'", "'DESCRIBE'", "'LIMIT'", "'/'", "'>='", "'Str'", 
		"'UNION'", "'NAMED'", "NumericLiteralPositive", "NumericLiteralNegative", 
		"BooleanLiteral", "String", "BlankNode", "IRI_REF", "PNAME_NS", "PREFIXED_NAME", 
		"PNAME_LN", "BLANK_NODE_LABEL", "VAR1", "VAR2", "LANGTAG", "INTEGER", 
		"DECIMAL", "DOUBLE", "INTEGER_POSITIVE", "DECIMAL_POSITIVE", "DOUBLE_POSITIVE", 
		"INTEGER_NEGATIVE", "DECIMAL_NEGATIVE", "DOUBLE_NEGATIVE", "EXPONENT", 
		"STRING_LITERAL1", "STRING_LITERAL2", "STRING_LITERAL_LONG1", "STRING_LITERAL_LONG2", 
		"ECHAR", "NIL", "WS", "ANON", "PN_CHARS_BASE", "PN_CHARS_U", "VARNAME", 
		"PN_CHARS", "PN_PREFIX", "PN_LOCAL"
	};
	public const int
		RULE_query = 0, RULE_prologue = 1, RULE_basedecl = 2, RULE_prefixDecl = 3, 
		RULE_selectQuery = 4, RULE_constructQuery = 5, RULE_describeQuery = 6, 
		RULE_askQuery = 7, RULE_datasetClause = 8, RULE_defaultGraphClause = 9, 
		RULE_namedGraphClause = 10, RULE_sourceSelector = 11, RULE_whereClause = 12, 
		RULE_solutionModifier = 13, RULE_limitOffsetClauses = 14, RULE_orderClause = 15, 
		RULE_orderCondition = 16, RULE_limitClause = 17, RULE_offsetClause = 18, 
		RULE_groupGraphPattern = 19, RULE_triplesBlock = 20, RULE_graphPatternNotTriples = 21, 
		RULE_optionalGraphPattern = 22, RULE_graphGraphPattern = 23, RULE_groupOrUnionGraphPattern = 24, 
		RULE_filter = 25, RULE_constraint = 26, RULE_functionCall = 27, RULE_argList = 28, 
		RULE_constructTemplate = 29, RULE_constructTriples = 30, RULE_triplesSameSubject = 31, 
		RULE_propertyListNotEmpty = 32, RULE_propertyList = 33, RULE_objectList = 34, 
		RULE_object = 35, RULE_verb = 36, RULE_triplesNode = 37, RULE_blankNodePropertyList = 38, 
		RULE_collection = 39, RULE_graphNode = 40, RULE_varOrTerm = 41, RULE_varOrIRIref = 42, 
		RULE_var = 43, RULE_graphTerm = 44, RULE_expression = 45, RULE_conditionalOrExpression = 46, 
		RULE_conditionalAndExpression = 47, RULE_valueLogical = 48, RULE_relationalExpression = 49, 
		RULE_numericExpression = 50, RULE_additiveExpression = 51, RULE_multiplicativeExpression = 52, 
		RULE_unaryExpression = 53, RULE_primaryExpression = 54, RULE_brackettedExpression = 55, 
		RULE_builtInCall = 56, RULE_regexExpression = 57, RULE_iRIrefOrFunction = 58, 
		RULE_rDFLiteral = 59, RULE_iRIref = 60, RULE_numericLiteral = 61, RULE_numericLiteralUnsigned = 62;
	public static readonly string[] ruleNames = {
		"query", "prologue", "basedecl", "prefixDecl", "selectQuery", "constructQuery", 
		"describeQuery", "askQuery", "datasetClause", "defaultGraphClause", "namedGraphClause", 
		"sourceSelector", "whereClause", "solutionModifier", "limitOffsetClauses", 
		"orderClause", "orderCondition", "limitClause", "offsetClause", "groupGraphPattern", 
		"triplesBlock", "graphPatternNotTriples", "optionalGraphPattern", "graphGraphPattern", 
		"groupOrUnionGraphPattern", "filter", "constraint", "functionCall", "argList", 
		"constructTemplate", "constructTriples", "triplesSameSubject", "propertyListNotEmpty", 
		"propertyList", "objectList", "object", "verb", "triplesNode", "blankNodePropertyList", 
		"collection", "graphNode", "varOrTerm", "varOrIRIref", "var", "graphTerm", 
		"expression", "conditionalOrExpression", "conditionalAndExpression", "valueLogical", 
		"relationalExpression", "numericExpression", "additiveExpression", "multiplicativeExpression", 
		"unaryExpression", "primaryExpression", "brackettedExpression", "builtInCall", 
		"regexExpression", "iRIrefOrFunction", "rDFLiteral", "iRIref", "numericLiteral", 
		"numericLiteralUnsigned"
	};

	public override string GrammarFileName { get { return "sparql.g4"; } }

	public override string[] TokenNames { get { return tokenNames; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }


		
	public	XElement x=new XElement("sparql"), spo=new XElement("spo");

	public sparqlParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class QueryContext : ParserRuleContext {
		public AskQueryContext askQuery() {
			return GetRuleContext<AskQueryContext>(0);
		}
		public DescribeQueryContext describeQuery() {
			return GetRuleContext<DescribeQueryContext>(0);
		}
		public PrologueContext prologue() {
			return GetRuleContext<PrologueContext>(0);
		}
		public ConstructQueryContext constructQuery() {
			return GetRuleContext<ConstructQueryContext>(0);
		}
		public SelectQueryContext selectQuery() {
			return GetRuleContext<SelectQueryContext>(0);
		}
		public QueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_query; }
		public override void EnterRule(IParseTreeListener listener) {
			IsparqlListener typedListener = listener as IsparqlListener;
			if (typedListener != null) typedListener.EnterQuery(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsparqlListener typedListener = listener as IsparqlListener;
			if (typedListener != null) typedListener.ExitQuery(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsparqlVisitor<TResult> typedVisitor = visitor as IsparqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuery(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QueryContext query() {
		QueryContext _localctx = new QueryContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_query);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 126; prologue();
			State = 131;
			switch (_input.La(1)) {
			case 35:
				{
				State = 127; selectQuery();
				}
				break;
			case 59:
				{
				State = 128; constructQuery();
				}
				break;
			case 66:
				{
				State = 129; describeQuery();
				}
				break;
			case 52:
				{
				State = 130; askQuery();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			 	Console.WriteLine("ok");  
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrologueContext : ParserRuleContext {
		public PrefixDeclContext prefixDecl(int i) {
			return GetRuleContext<PrefixDeclContext>(i);
		}
		public BasedeclContext basedecl() {
			return GetRuleContext<BasedeclContext>(0);
		}
		public IReadOnlyList<PrefixDeclContext> prefixDecl() {
			return GetRuleContexts<PrefixDeclContext>();
		}
		public PrologueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_prologue; }
		public override void EnterRule(IParseTreeListener listener) {
			IsparqlListener typedListener = listener as IsparqlListener;
			if (typedListener != null) typedListener.EnterPrologue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsparqlListener typedListener = listener as IsparqlListener;
			if (typedListener != null) typedListener.ExitPrologue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsparqlVisitor<TResult> typedVisitor = visitor as IsparqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrologue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrologueContext prologue() {
		PrologueContext _localctx = new PrologueContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_prologue);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 136;
			_la = _input.La(1);
			if (_la==29) {
				{
				State = 135; basedecl();
				}
			}

			State = 141;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==16) {
				{
				{
				State = 138; prefixDecl();
				}
				}
				State = 143;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BasedeclContext : ParserRuleContext {
		public ITerminalNode IRI_REF() { return GetToken(sparqlParser.IRI_REF, 0); }
		public BasedeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_basedecl; }
		public override void EnterRule(IParseTreeListener listener) {
			IsparqlListener typedListener = listener as IsparqlListener;
			if (typedListener != null) typedListener.EnterBasedecl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsparqlListener typedListener = listener as IsparqlListener;
			if (typedListener != null) typedListener.ExitBasedecl(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsparqlVisitor<TResult> typedVisitor = visitor as IsparqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBasedecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BasedeclContext basedecl() {
		BasedeclContext _localctx = new BasedeclContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_basedecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 144; Match(29);
			State = 145; Match(IRI_REF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrefixDeclContext : ParserRuleContext {
		public IToken _PNAME_NS;
		public IToken _IRI_REF;
		public ITerminalNode IRI_REF() { return GetToken(sparqlParser.IRI_REF, 0); }
		public ITerminalNode PNAME_NS() { return GetToken(sparqlParser.PNAME_NS, 0); }
		public PrefixDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_prefixDecl; }
		public override void EnterRule(IParseTreeListener listener) {
			IsparqlListener typedListener = listener as IsparqlListener;
			if (typedListener != null) typedListener.EnterPrefixDecl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsparqlListener typedListener = listener as IsparqlListener;
			if (typedListener != null) typedListener.ExitPrefixDecl(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsparqlVisitor<TResult> typedVisitor = visitor as IsparqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrefixDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrefixDeclContext prefixDecl() {
		PrefixDeclContext _localctx = new PrefixDeclContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_prefixDecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 147; Match(16);
			State = 148; _localctx._PNAME_NS = Match(PNAME_NS);
			State = 149; _localctx._IRI_REF = Match(IRI_REF);
			 	x.Add(new XElement("prefix",new XElement("name", (_localctx._PNAME_NS!=null?_localctx._PNAME_NS.Text:null)), new XElement("name", (_localctx._IRI_REF!=null?_localctx._IRI_REF.Text:null)))); 
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectQueryContext : ParserRuleContext {
		public VarContext _var;
		public VarContext var(int i) {
			return GetRuleContext<VarContext>(i);
		}
		public DatasetClauseContext datasetClause(int i) {
			return GetRuleContext<DatasetClauseContext>(i);
		}
		public WhereClauseContext whereClause() {
			return GetRuleContext<WhereClauseContext>(0);
		}
		public IReadOnlyList<DatasetClauseContext> datasetClause() {
			return GetRuleContexts<DatasetClauseContext>();
		}
		public IReadOnlyList<VarContext> var() {
			return GetRuleContexts<VarContext>();
		}
		public SolutionModifierContext solutionModifier() {
			return GetRuleContext<SolutionModifierContext>(0);
		}
		public SelectQueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_selectQuery; }
		public override void EnterRule(IParseTreeListener listener) {
			IsparqlListener typedListener = listener as IsparqlListener;
			if (typedListener != null) typedListener.EnterSelectQuery(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsparqlListener typedListener = listener as IsparqlListener;
			if (typedListener != null) typedListener.ExitSelectQuery(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsparqlVisitor<TResult> typedVisitor = visitor as IsparqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectQuery(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectQueryContext selectQuery() {
		SelectQueryContext _localctx = new SelectQueryContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_selectQuery);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 152; Match(35);
			 x.Add(new XElement("select"));  
			State = 158;
			switch (_input.La(1)) {
			case 1:
				{
				State = 154; Match(1);
					x.Element("select").Add(new XElement("DISTINCT"));
				}
				break;
			case 56:
				{
				State = 156; Match(56);
					x.Element("select").Add(new XElement("REDUCED"));
				}
				break;
			case 6:
			case VAR1:
			case VAR2:
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 169;
			switch (_input.La(1)) {
			case VAR1:
			case VAR2:
				{
				State = 163;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 160; _localctx._var = var();
						x.Element("select").Add(new XElement("variable", (_localctx._var!=null?_input.GetText(_localctx._var.start,_localctx._var.stop):null)));
					}
					}
					State = 165;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==VAR1 || _la==VAR2 );
				}
				break;
			case 6:
				{
				State = 167; Match(6);
				 	x.Element("select").Add(new XElement("all_variables"));	
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 174;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==31) {
				{
				{
				State = 171; datasetClause();
				}
				}
				State = 176;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 177; whereClause();
			State = 178; solutionModifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstructQueryContext : ParserRuleContext {
		public ConstructTemplateContext _constructTemplate;
		public DatasetClauseContext datasetClause(int i) {
			return GetRuleContext<DatasetClauseContext>(i);
		}
		public WhereClauseContext whereClause() {
			return GetRuleContext<WhereClauseContext>(0);
		}
		public IReadOnlyList<DatasetClauseContext> datasetClause() {
			return GetRuleContexts<DatasetClauseContext>();
		}
		public ConstructTemplateContext constructTemplate() {
			return GetRuleContext<ConstructTemplateContext>(0);
		}
		public SolutionModifierContext solutionModifier() {
			return GetRuleContext<SolutionModifierContext>(0);
		}
		public ConstructQueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_constructQuery; }
		public override void EnterRule(IParseTreeListener listener) {
			IsparqlListener typedListener = listener as IsparqlListener;
			if (typedListener != null) typedListener.EnterConstructQuery(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsparqlListener typedListener = listener as IsparqlListener;
			if (typedListener != null) typedListener.ExitConstructQuery(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsparqlVisitor<TResult> typedVisitor = visitor as IsparqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstructQuery(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstructQueryContext constructQuery() {
		ConstructQueryContext _localctx = new ConstructQueryContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_constructQuery);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 180; Match(59);
			State = 181; _localctx._constructTemplate = constructTemplate();
			State = 185;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==31) {
				{
				{
				State = 182; datasetClause();
				}
				}
				State = 187;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 188; whereClause();
			State = 189; solutionModifier();

			    x.Add(_localctx._constructTemplate.value);

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DescribeQueryContext : ParserRuleContext {
		public VarOrIRIrefContext _varOrIRIref;
		public VarOrIRIrefContext varOrIRIref(int i) {
			return GetRuleContext<VarOrIRIrefContext>(i);
		}
		public DatasetClauseContext datasetClause(int i) {
			return GetRuleContext<DatasetClauseContext>(i);
		}
		public WhereClauseContext whereClause() {
			return GetRuleContext<WhereClauseContext>(0);
		}
		public IReadOnlyList<DatasetClauseContext> datasetClause() {
			return GetRuleContexts<DatasetClauseContext>();
		}
		public IReadOnlyList<VarOrIRIrefContext> varOrIRIref() {
			return GetRuleContexts<VarOrIRIrefContext>();
		}
		public SolutionModifierContext solutionModifier() {
			return GetRuleContext<SolutionModifierContext>(0);
		}
		public DescribeQueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_describeQuery; }
		public override void EnterRule(IParseTreeListener listener) {
			IsparqlListener typedListener = listener as IsparqlListener;
			if (typedListener != null) typedListener.EnterDescribeQuery(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsparqlListener typedListener = listener as IsparqlListener;
			if (typedListener != null) typedListener.ExitDescribeQuery(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsparqlVisitor<TResult> typedVisitor = visitor as IsparqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDescribeQuery(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DescribeQueryContext describeQuery() {
		DescribeQueryContext _localctx = new DescribeQueryContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_describeQuery);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 192; Match(66);
			 x.Add(new XElement("DESCRIBE"));
			State = 203;
			switch (_input.La(1)) {
			case IRI_REF:
			case PREFIXED_NAME:
			case VAR1:
			case VAR2:
				{
				State = 197;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 194; _localctx._varOrIRIref = varOrIRIref();
					x.Element("DESCRIBE").Add(_localctx._varOrIRIref.value);
					}
					}
					State = 199;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( ((((_la - 78)) & ~0x3f) == 0 && ((1L << (_la - 78)) & ((1L << (IRI_REF - 78)) | (1L << (PREFIXED_NAME - 78)) | (1L << (VAR1 - 78)) | (1L << (VAR2 - 78)))) != 0) );
				}
				break;
			case 6:
				{
				State = 201; Match(6);
				x.Element("DESCRIBE").Add("all");
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 208;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==31) {
				{
				{
				State = 205; datasetClause();
				}
				}
				State = 210;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 212;
			_la = _input.La(1);
			if (_la==5 || _la==48) {
				{
				State = 211; whereClause();
				}
			}

			State = 214; solutionModifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AskQueryContext : ParserRuleContext {
		public DatasetClauseContext datasetClause(int i) {
			return GetRuleContext<DatasetClauseContext>(i);
		}
		public WhereClauseContext whereClause() {
			return GetRuleContext<WhereClauseContext>(0);
		}
		public IReadOnlyList<DatasetClauseContext> datasetClause() {
			return GetRuleContexts<DatasetClauseContext>();
		}
		public AskQueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_askQuery; }
		public override void EnterRule(IParseTreeListener listener) {
			IsparqlListener typedListener = listener as IsparqlListener;
			if (typedListener != null) typedListener.EnterAskQuery(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsparqlListener typedListener = listener as IsparqlListener;
			if (typedListener != null) typedListener.ExitAskQuery(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsparqlVisitor<TResult> typedVisitor = visitor as IsparqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAskQuery(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AskQueryContext askQuery() {
		AskQueryContext _localctx = new AskQueryContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_askQuery);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 216; Match(52);
			State = 220;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==31) {
				{
				{
				State = 217; datasetClause();
				}
				}
				State = 222;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 223; whereClause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasetClauseContext : ParserRuleContext {
		public NamedGraphClauseContext namedGraphClause() {
			return GetRuleContext<NamedGraphClauseContext>(0);
		}
		public DefaultGraphClauseContext defaultGraphClause() {
			return GetRuleContext<DefaultGraphClauseContext>(0);
		}
		public DatasetClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_datasetClause; }
		public override void EnterRule(IParseTreeListener listener) {
			IsparqlListener typedListener = listener as IsparqlListener;
			if (typedListener != null) typedListener.EnterDatasetClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsparqlListener typedListener = listener as IsparqlListener;
			if (typedListener != null) typedListener.ExitDatasetClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsparqlVisitor<TResult> typedVisitor = visitor as IsparqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasetClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasetClauseContext datasetClause() {
		DatasetClauseContext _localctx = new DatasetClauseContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_datasetClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 225; Match(31);
			 if(x.Element("from")==null) x.Add(new XElement("from")); 
			State = 229;
			switch (_input.La(1)) {
			case IRI_REF:
			case PREFIXED_NAME:
				{
				State = 227; defaultGraphClause();
				}
				break;
			case 72:
				{
				State = 228; namedGraphClause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefaultGraphClauseContext : ParserRuleContext {
		public SourceSelectorContext sourceSelector() {
			return GetRuleContext<SourceSelectorContext>(0);
		}
		public DefaultGraphClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_defaultGraphClause; }
		public override void EnterRule(IParseTreeListener listener) {
			IsparqlListener typedListener = listener as IsparqlListener;
			if (typedListener != null) typedListener.EnterDefaultGraphClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsparqlListener typedListener = listener as IsparqlListener;
			if (typedListener != null) typedListener.ExitDefaultGraphClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsparqlVisitor<TResult> typedVisitor = visitor as IsparqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefaultGraphClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefaultGraphClauseContext defaultGraphClause() {
		DefaultGraphClauseContext _localctx = new DefaultGraphClauseContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_defaultGraphClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 231; sourceSelector();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamedGraphClauseContext : ParserRuleContext {
		public SourceSelectorContext sourceSelector() {
			return GetRuleContext<SourceSelectorContext>(0);
		}
		public NamedGraphClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_namedGraphClause; }
		public override void EnterRule(IParseTreeListener listener) {
			IsparqlListener typedListener = listener as IsparqlListener;
			if (typedListener != null) typedListener.EnterNamedGraphClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsparqlListener typedListener = listener as IsparqlListener;
			if (typedListener != null) typedListener.ExitNamedGraphClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsparqlVisitor<TResult> typedVisitor = visitor as IsparqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamedGraphClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamedGraphClauseContext namedGraphClause() {
		NamedGraphClauseContext _localctx = new NamedGraphClauseContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_namedGraphClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 233; Match(72);
			State = 234; sourceSelector();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SourceSelectorContext : ParserRuleContext {
		public IRIrefContext _iRIref;
		public IRIrefContext iRIref() {
			return GetRuleContext<IRIrefContext>(0);
		}
		public SourceSelectorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_sourceSelector; }
		public override void EnterRule(IParseTreeListener listener) {
			IsparqlListener typedListener = listener as IsparqlListener;
			if (typedListener != null) typedListener.EnterSourceSelector(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsparqlListener typedListener = listener as IsparqlListener;
			if (typedListener != null) typedListener.ExitSourceSelector(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsparqlVisitor<TResult> typedVisitor = visitor as IsparqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSourceSelector(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SourceSelectorContext sourceSelector() {
		SourceSelectorContext _localctx = new SourceSelectorContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_sourceSelector);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 236; _localctx._iRIref = iRIref();

			  x.Element("from").Add(_localctx._iRIref.value);

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhereClauseContext : ParserRuleContext {
		public GroupGraphPatternContext _groupGraphPattern;
		public GroupGraphPatternContext groupGraphPattern() {
			return GetRuleContext<GroupGraphPatternContext>(0);
		}
		public WhereClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_whereClause; }
		public override void EnterRule(IParseTreeListener listener) {
			IsparqlListener typedListener = listener as IsparqlListener;
			if (typedListener != null) typedListener.EnterWhereClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsparqlListener typedListener = listener as IsparqlListener;
			if (typedListener != null) typedListener.ExitWhereClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsparqlVisitor<TResult> typedVisitor = visitor as IsparqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhereClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhereClauseContext whereClause() {
		WhereClauseContext _localctx = new WhereClauseContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_whereClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 240;
			_la = _input.La(1);
			if (_la==5) {
				{
				State = 239; Match(5);
				}
			}

			State = 242; _localctx._groupGraphPattern = groupGraphPattern();

			   x.Add(new XElement("WHERE", _localctx._groupGraphPattern.value)); 

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SolutionModifierContext : ParserRuleContext {
		public OrderClauseContext _orderClause;
		public LimitOffsetClausesContext _limitOffsetClauses;
		public LimitOffsetClausesContext limitOffsetClauses() {
			return GetRuleContext<LimitOffsetClausesContext>(0);
		}
		public OrderClauseContext orderClause() {
			return GetRuleContext<OrderClauseContext>(0);
		}
		public SolutionModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_solutionModifier; }
		public override void EnterRule(IParseTreeListener listener) {
			IsparqlListener typedListener = listener as IsparqlListener;
			if (typedListener != null) typedListener.EnterSolutionModifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsparqlListener typedListener = listener as IsparqlListener;
			if (typedListener != null) typedListener.ExitSolutionModifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsparqlVisitor<TResult> typedVisitor = visitor as IsparqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSolutionModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SolutionModifierContext solutionModifier() {
		SolutionModifierContext _localctx = new SolutionModifierContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_solutionModifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 248;
			_la = _input.La(1);
			if (_la==15) {
				{
				State = 245; _localctx._orderClause = orderClause();
				 x.Add(_localctx._orderClause.value); 
				}
			}

			State = 253;
			_la = _input.La(1);
			if (_la==40 || _la==67) {
				{
				State = 250; _localctx._limitOffsetClauses = limitOffsetClauses();
					  x.Add(_localctx._limitOffsetClauses.value); 
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LimitOffsetClausesContext : ParserRuleContext {
		public List<XElement> value;
		public LimitClauseContext _limitClause;
		public OffsetClauseContext _offsetClause;
		public OffsetClauseContext offsetClause() {
			return GetRuleContext<OffsetClauseContext>(0);
		}
		public LimitClauseContext limitClause() {
			return GetRuleContext<LimitClauseContext>(0);
		}
		public LimitOffsetClausesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_limitOffsetClauses; }
		public override void EnterRule(IParseTreeListener listener) {
			IsparqlListener typedListener = listener as IsparqlListener;
			if (typedListener != null) typedListener.EnterLimitOffsetClauses(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsparqlListener typedListener = listener as IsparqlListener;
			if (typedListener != null) typedListener.ExitLimitOffsetClauses(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsparqlVisitor<TResult> typedVisitor = visitor as IsparqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLimitOffsetClauses(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LimitOffsetClausesContext limitOffsetClauses() {
		LimitOffsetClausesContext _localctx = new LimitOffsetClausesContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_limitOffsetClauses);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 269;
			switch (_input.La(1)) {
			case 67:
				{
				State = 255; _localctx._limitClause = limitClause();
				_localctx.value = new List<XElement>(){_localctx._limitClause.value};
				State = 260;
				_la = _input.La(1);
				if (_la==40) {
					{
					State = 257; _localctx._offsetClause = offsetClause();
					_localctx.value.Add(_localctx._offsetClause.value);
					}
				}

				}
				break;
			case 40:
				{
				State = 262; _localctx._offsetClause = offsetClause();
				_localctx.value = new List<XElement>(){_localctx._offsetClause.value};
				State = 267;
				_la = _input.La(1);
				if (_la==67) {
					{
					State = 264; _localctx._limitClause = limitClause();
					_localctx.value.Add(_localctx._limitClause.value);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OrderClauseContext : ParserRuleContext {
		public XElement value;
		public OrderConditionContext _orderCondition;
		public OrderConditionContext orderCondition(int i) {
			return GetRuleContext<OrderConditionContext>(i);
		}
		public IReadOnlyList<OrderConditionContext> orderCondition() {
			return GetRuleContexts<OrderConditionContext>();
		}
		public OrderClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_orderClause; }
		public override void EnterRule(IParseTreeListener listener) {
			IsparqlListener typedListener = listener as IsparqlListener;
			if (typedListener != null) typedListener.EnterOrderClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsparqlListener typedListener = listener as IsparqlListener;
			if (typedListener != null) typedListener.ExitOrderClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsparqlVisitor<TResult> typedVisitor = visitor as IsparqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrderClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OrderClauseContext orderClause() {
		OrderClauseContext _localctx = new OrderClauseContext(_ctx, State);
		EnterRule(_localctx, 30, RULE_orderClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 271; Match(15);
			State = 272; Match(38);
			_localctx.value = new XElement("orderBy");
			State = 277;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 274; _localctx._orderCondition = orderCondition();
				_localctx.value.Add(_localctx._orderCondition.value);
				}
				}
				State = 279;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << 2) | (1L << 3) | (1L << 9) | (1L << 12) | (1L << 17) | (1L << 18) | (1L << 20) | (1L << 21) | (1L << 22) | (1L << 23) | (1L << 24) | (1L << 26) | (1L << 27) | (1L << 28) | (1L << 30) | (1L << 32) | (1L << 33) | (1L << 41) | (1L << 43) | (1L << 44) | (1L << 45) | (1L << 46) | (1L << 47) | (1L << 49) | (1L << 50) | (1L << 51) | (1L << 60) | (1L << 61))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (65 - 65)) | (1L << (70 - 65)) | (1L << (IRI_REF - 65)) | (1L << (PREFIXED_NAME - 65)) | (1L << (VAR1 - 65)) | (1L << (VAR2 - 65)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OrderConditionContext : ParserRuleContext {
		public XElement value;
		public BrackettedExpressionContext _brackettedExpression;
		public ConstraintContext _constraint;
		public VarContext _var;
		public ConstraintContext constraint() {
			return GetRuleContext<ConstraintContext>(0);
		}
		public BrackettedExpressionContext brackettedExpression() {
			return GetRuleContext<BrackettedExpressionContext>(0);
		}
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public OrderConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_orderCondition; }
		public override void EnterRule(IParseTreeListener listener) {
			IsparqlListener typedListener = listener as IsparqlListener;
			if (typedListener != null) typedListener.EnterOrderCondition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsparqlListener typedListener = listener as IsparqlListener;
			if (typedListener != null) typedListener.ExitOrderCondition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsparqlVisitor<TResult> typedVisitor = visitor as IsparqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrderCondition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OrderConditionContext orderCondition() {
		OrderConditionContext _localctx = new OrderConditionContext(_ctx, State);
		EnterRule(_localctx, 32, RULE_orderCondition);
		try {
			State = 298;
			switch (_input.La(1)) {
			case 24:
			case 41:
				EnterOuterAlt(_localctx, 1);
				{
				{
				_localctx.value = new XElement("brackettedExpression");
				State = 285;
				switch (_input.La(1)) {
				case 41:
					{
					State = 282; Match(41);
					}
					break;
				case 24:
					{
					State = 283; Match(24);
					 _localctx.value.Add(new XAttribute("direction", "desc"));
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 287; _localctx._brackettedExpression = brackettedExpression();
				_localctx.value.Add(_localctx._brackettedExpression.value);
				}
				}
				break;
			case 2:
			case 3:
			case 9:
			case 12:
			case 17:
			case 18:
			case 20:
			case 21:
			case 22:
			case 23:
			case 26:
			case 27:
			case 28:
			case 30:
			case 32:
			case 33:
			case 43:
			case 44:
			case 45:
			case 46:
			case 47:
			case 49:
			case 50:
			case 51:
			case 60:
			case 61:
			case 65:
			case 70:
			case IRI_REF:
			case PREFIXED_NAME:
			case VAR1:
			case VAR2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 296;
				switch (_input.La(1)) {
				case 2:
				case 3:
				case 9:
				case 12:
				case 17:
				case 18:
				case 20:
				case 21:
				case 22:
				case 23:
				case 26:
				case 27:
				case 28:
				case 30:
				case 32:
				case 33:
				case 43:
				case 44:
				case 45:
				case 46:
				case 47:
				case 49:
				case 50:
				case 51:
				case 60:
				case 61:
				case 65:
				case 70:
				case IRI_REF:
				case PREFIXED_NAME:
					{
					State = 290; _localctx._constraint = constraint();
					_localctx.value = new XElement("constraint", _localctx._constraint.value);
					}
					break;
				case VAR1:
				case VAR2:
					{
					State = 293; _localctx._var = var();
					_localctx.value =  _localctx._var.value;
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LimitClauseContext : ParserRuleContext {
		public XElement value;
		public IToken _INTEGER;
		public ITerminalNode INTEGER() { return GetToken(sparqlParser.INTEGER, 0); }
		public LimitClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_limitClause; }
		public override void EnterRule(IParseTreeListener listener) {
			IsparqlListener typedListener = listener as IsparqlListener;
			if (typedListener != null) typedListener.EnterLimitClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsparqlListener typedListener = listener as IsparqlListener;
			if (typedListener != null) typedListener.ExitLimitClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsparqlVisitor<TResult> typedVisitor = visitor as IsparqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLimitClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LimitClauseContext limitClause() {
		LimitClauseContext _localctx = new LimitClauseContext(_ctx, State);
		EnterRule(_localctx, 34, RULE_limitClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 300; Match(67);
			State = 301; _localctx._INTEGER = Match(INTEGER);
			_localctx.value = new XElement("limit",(_localctx._INTEGER!=null?_localctx._INTEGER.Text:null));
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OffsetClauseContext : ParserRuleContext {
		public XElement value;
		public IToken _INTEGER;
		public ITerminalNode INTEGER() { return GetToken(sparqlParser.INTEGER, 0); }
		public OffsetClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_offsetClause; }
		public override void EnterRule(IParseTreeListener listener) {
			IsparqlListener typedListener = listener as IsparqlListener;
			if (typedListener != null) typedListener.EnterOffsetClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsparqlListener typedListener = listener as IsparqlListener;
			if (typedListener != null) typedListener.ExitOffsetClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsparqlVisitor<TResult> typedVisitor = visitor as IsparqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOffsetClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OffsetClauseContext offsetClause() {
		OffsetClauseContext _localctx = new OffsetClauseContext(_ctx, State);
		EnterRule(_localctx, 36, RULE_offsetClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 304; Match(40);
			State = 305; _localctx._INTEGER = Match(INTEGER);
			_localctx.value = new XElement("offset",(_localctx._INTEGER!=null?_localctx._INTEGER.Text:null));
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GroupGraphPatternContext : ParserRuleContext {
		public List<XElement> value;
		public TriplesBlockContext strt;
		public GraphPatternNotTriplesContext _graphPatternNotTriples;
		public FilterContext _filter;
		public TriplesBlockContext end;
		public IReadOnlyList<FilterContext> filter() {
			return GetRuleContexts<FilterContext>();
		}
		public IReadOnlyList<GraphPatternNotTriplesContext> graphPatternNotTriples() {
			return GetRuleContexts<GraphPatternNotTriplesContext>();
		}
		public GraphPatternNotTriplesContext graphPatternNotTriples(int i) {
			return GetRuleContext<GraphPatternNotTriplesContext>(i);
		}
		public FilterContext filter(int i) {
			return GetRuleContext<FilterContext>(i);
		}
		public TriplesBlockContext triplesBlock(int i) {
			return GetRuleContext<TriplesBlockContext>(i);
		}
		public IReadOnlyList<TriplesBlockContext> triplesBlock() {
			return GetRuleContexts<TriplesBlockContext>();
		}
		public GroupGraphPatternContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_groupGraphPattern; }
		public override void EnterRule(IParseTreeListener listener) {
			IsparqlListener typedListener = listener as IsparqlListener;
			if (typedListener != null) typedListener.EnterGroupGraphPattern(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsparqlListener typedListener = listener as IsparqlListener;
			if (typedListener != null) typedListener.ExitGroupGraphPattern(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsparqlVisitor<TResult> typedVisitor = visitor as IsparqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGroupGraphPattern(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GroupGraphPatternContext groupGraphPattern() {
		GroupGraphPatternContext _localctx = new GroupGraphPatternContext(_ctx, State);
		EnterRule(_localctx, 38, RULE_groupGraphPattern);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 308; Match(48);
			State = 312;
			_la = _input.La(1);
			if (_la==4 || _la==43 || ((((_la - 73)) & ~0x3f) == 0 && ((1L << (_la - 73)) & ((1L << (NumericLiteralPositive - 73)) | (1L << (NumericLiteralNegative - 73)) | (1L << (BooleanLiteral - 73)) | (1L << (String - 73)) | (1L << (BlankNode - 73)) | (1L << (IRI_REF - 73)) | (1L << (PREFIXED_NAME - 73)) | (1L << (VAR1 - 73)) | (1L << (VAR2 - 73)) | (1L << (INTEGER - 73)) | (1L << (DECIMAL - 73)) | (1L << (DOUBLE - 73)) | (1L << (NIL - 73)))) != 0)) {
				{
				State = 309; _localctx.strt = triplesBlock();
				_localctx.value = _localctx.strt.value;
				}
			}

			State = 332;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << 7) | (1L << 37) | (1L << 48) | (1L << 53))) != 0)) {
				{
				{
				State = 320;
				switch (_input.La(1)) {
				case 37:
				case 48:
				case 53:
					{
					State = 314; _localctx._graphPatternNotTriples = graphPatternNotTriples();
					 if(_localctx.value==null) _localctx.value =  new List<XElement>(){ _localctx._graphPatternNotTriples.value}; else _localctx.value.Add(_localctx._graphPatternNotTriples.value); 
					}
					break;
				case 7:
					{
					State = 317; _localctx._filter = filter();
					 if(_localctx.value==null) _localctx.value =  new List<XElement>(){_localctx._filter.value}; else _localctx.value.Add(_localctx._filter.value); 
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 323;
				_la = _input.La(1);
				if (_la==55) {
					{
					State = 322; Match(55);
					}
				}

				State = 328;
				_la = _input.La(1);
				if (_la==4 || _la==43 || ((((_la - 73)) & ~0x3f) == 0 && ((1L << (_la - 73)) & ((1L << (NumericLiteralPositive - 73)) | (1L << (NumericLiteralNegative - 73)) | (1L << (BooleanLiteral - 73)) | (1L << (String - 73)) | (1L << (BlankNode - 73)) | (1L << (IRI_REF - 73)) | (1L << (PREFIXED_NAME - 73)) | (1L << (VAR1 - 73)) | (1L << (VAR2 - 73)) | (1L << (INTEGER - 73)) | (1L << (DECIMAL - 73)) | (1L << (DOUBLE - 73)) | (1L << (NIL - 73)))) != 0)) {
					{
					State = 325; _localctx.end = triplesBlock();
					 _localctx.value.AddRange(_localctx.end.value); 
					}
				}

				}
				}
				State = 334;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 335; Match(13);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TriplesBlockContext : ParserRuleContext {
		public List<XElement> value;
		public TriplesSameSubjectContext _triplesSameSubject;
		public TriplesBlockContext _triplesBlock;
		public TriplesBlockContext triplesBlock() {
			return GetRuleContext<TriplesBlockContext>(0);
		}
		public TriplesSameSubjectContext triplesSameSubject() {
			return GetRuleContext<TriplesSameSubjectContext>(0);
		}
		public TriplesBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_triplesBlock; }
		public override void EnterRule(IParseTreeListener listener) {
			IsparqlListener typedListener = listener as IsparqlListener;
			if (typedListener != null) typedListener.EnterTriplesBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsparqlListener typedListener = listener as IsparqlListener;
			if (typedListener != null) typedListener.ExitTriplesBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsparqlVisitor<TResult> typedVisitor = visitor as IsparqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTriplesBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TriplesBlockContext triplesBlock() {
		TriplesBlockContext _localctx = new TriplesBlockContext(_ctx, State);
		EnterRule(_localctx, 40, RULE_triplesBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 337; _localctx._triplesSameSubject = triplesSameSubject();
			_localctx.value = new List<XElement>(){_localctx._triplesSameSubject.value};
			State = 345;
			_la = _input.La(1);
			if (_la==55) {
				{
				State = 339; Match(55);
				State = 343;
				_la = _input.La(1);
				if (_la==4 || _la==43 || ((((_la - 73)) & ~0x3f) == 0 && ((1L << (_la - 73)) & ((1L << (NumericLiteralPositive - 73)) | (1L << (NumericLiteralNegative - 73)) | (1L << (BooleanLiteral - 73)) | (1L << (String - 73)) | (1L << (BlankNode - 73)) | (1L << (IRI_REF - 73)) | (1L << (PREFIXED_NAME - 73)) | (1L << (VAR1 - 73)) | (1L << (VAR2 - 73)) | (1L << (INTEGER - 73)) | (1L << (DECIMAL - 73)) | (1L << (DOUBLE - 73)) | (1L << (NIL - 73)))) != 0)) {
					{
					State = 340; _localctx._triplesBlock = triplesBlock();
					_localctx.value.AddRange(_localctx.value);
					}
				}

				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GraphPatternNotTriplesContext : ParserRuleContext {
		public XElement value;
		public OptionalGraphPatternContext _optionalGraphPattern;
		public GroupOrUnionGraphPatternContext _groupOrUnionGraphPattern;
		public GraphGraphPatternContext _graphGraphPattern;
		public GraphGraphPatternContext graphGraphPattern() {
			return GetRuleContext<GraphGraphPatternContext>(0);
		}
		public OptionalGraphPatternContext optionalGraphPattern() {
			return GetRuleContext<OptionalGraphPatternContext>(0);
		}
		public GroupOrUnionGraphPatternContext groupOrUnionGraphPattern() {
			return GetRuleContext<GroupOrUnionGraphPatternContext>(0);
		}
		public GraphPatternNotTriplesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_graphPatternNotTriples; }
		public override void EnterRule(IParseTreeListener listener) {
			IsparqlListener typedListener = listener as IsparqlListener;
			if (typedListener != null) typedListener.EnterGraphPatternNotTriples(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsparqlListener typedListener = listener as IsparqlListener;
			if (typedListener != null) typedListener.ExitGraphPatternNotTriples(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsparqlVisitor<TResult> typedVisitor = visitor as IsparqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGraphPatternNotTriples(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GraphPatternNotTriplesContext graphPatternNotTriples() {
		GraphPatternNotTriplesContext _localctx = new GraphPatternNotTriplesContext(_ctx, State);
		EnterRule(_localctx, 42, RULE_graphPatternNotTriples);
		try {
			State = 356;
			switch (_input.La(1)) {
			case 37:
				EnterOuterAlt(_localctx, 1);
				{
				State = 347; _localctx._optionalGraphPattern = optionalGraphPattern();
				_localctx.value = _localctx._optionalGraphPattern.value;
				}
				break;
			case 48:
				EnterOuterAlt(_localctx, 2);
				{
				State = 350; _localctx._groupOrUnionGraphPattern = groupOrUnionGraphPattern();
				_localctx.value = _localctx._groupOrUnionGraphPattern.value;
				}
				break;
			case 53:
				EnterOuterAlt(_localctx, 3);
				{
				State = 353; _localctx._graphGraphPattern = graphGraphPattern();
				_localctx.value = _localctx._graphGraphPattern.value;
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OptionalGraphPatternContext : ParserRuleContext {
		public XElement value;
		public GroupGraphPatternContext _groupGraphPattern;
		public GroupGraphPatternContext groupGraphPattern() {
			return GetRuleContext<GroupGraphPatternContext>(0);
		}
		public OptionalGraphPatternContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_optionalGraphPattern; }
		public override void EnterRule(IParseTreeListener listener) {
			IsparqlListener typedListener = listener as IsparqlListener;
			if (typedListener != null) typedListener.EnterOptionalGraphPattern(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsparqlListener typedListener = listener as IsparqlListener;
			if (typedListener != null) typedListener.ExitOptionalGraphPattern(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsparqlVisitor<TResult> typedVisitor = visitor as IsparqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOptionalGraphPattern(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OptionalGraphPatternContext optionalGraphPattern() {
		OptionalGraphPatternContext _localctx = new OptionalGraphPatternContext(_ctx, State);
		EnterRule(_localctx, 44, RULE_optionalGraphPattern);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 358; Match(37);
			State = 359; _localctx._groupGraphPattern = groupGraphPattern();

			_localctx.value =  new XElement("Optional", _localctx._groupGraphPattern.value);

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GraphGraphPatternContext : ParserRuleContext {
		public XElement value;
		public GroupGraphPatternContext groupGraphPattern() {
			return GetRuleContext<GroupGraphPatternContext>(0);
		}
		public VarOrIRIrefContext varOrIRIref() {
			return GetRuleContext<VarOrIRIrefContext>(0);
		}
		public GraphGraphPatternContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_graphGraphPattern; }
		public override void EnterRule(IParseTreeListener listener) {
			IsparqlListener typedListener = listener as IsparqlListener;
			if (typedListener != null) typedListener.EnterGraphGraphPattern(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsparqlListener typedListener = listener as IsparqlListener;
			if (typedListener != null) typedListener.ExitGraphGraphPattern(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsparqlVisitor<TResult> typedVisitor = visitor as IsparqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGraphGraphPattern(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GraphGraphPatternContext graphGraphPattern() {
		GraphGraphPatternContext _localctx = new GraphGraphPatternContext(_ctx, State);
		EnterRule(_localctx, 46, RULE_graphGraphPattern);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 362; Match(53);
			State = 363; varOrIRIref();
			State = 364; groupGraphPattern();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GroupOrUnionGraphPatternContext : ParserRuleContext {
		public XElement value;
		public GroupGraphPatternContext first;
		public GroupGraphPatternContext second;
		public IReadOnlyList<GroupGraphPatternContext> groupGraphPattern() {
			return GetRuleContexts<GroupGraphPatternContext>();
		}
		public GroupGraphPatternContext groupGraphPattern(int i) {
			return GetRuleContext<GroupGraphPatternContext>(i);
		}
		public GroupOrUnionGraphPatternContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_groupOrUnionGraphPattern; }
		public override void EnterRule(IParseTreeListener listener) {
			IsparqlListener typedListener = listener as IsparqlListener;
			if (typedListener != null) typedListener.EnterGroupOrUnionGraphPattern(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsparqlListener typedListener = listener as IsparqlListener;
			if (typedListener != null) typedListener.ExitGroupOrUnionGraphPattern(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsparqlVisitor<TResult> typedVisitor = visitor as IsparqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGroupOrUnionGraphPattern(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GroupOrUnionGraphPatternContext groupOrUnionGraphPattern() {
		GroupOrUnionGraphPatternContext _localctx = new GroupOrUnionGraphPatternContext(_ctx, State);
		EnterRule(_localctx, 48, RULE_groupOrUnionGraphPattern);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 366; _localctx.first = groupGraphPattern();
			_localctx.value = new XElement("UNION", _localctx.first.value);
			State = 374;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==71) {
				{
				{
				State = 368; Match(71);
				State = 369; _localctx.second = groupGraphPattern();
				 _localctx.value.Add(_localctx.second.value);
				}
				}
				State = 376;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FilterContext : ParserRuleContext {
		public XElement value;
		public ConstraintContext _constraint;
		public ConstraintContext constraint() {
			return GetRuleContext<ConstraintContext>(0);
		}
		public FilterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_filter; }
		public override void EnterRule(IParseTreeListener listener) {
			IsparqlListener typedListener = listener as IsparqlListener;
			if (typedListener != null) typedListener.EnterFilter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsparqlListener typedListener = listener as IsparqlListener;
			if (typedListener != null) typedListener.ExitFilter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsparqlVisitor<TResult> typedVisitor = visitor as IsparqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFilter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FilterContext filter() {
		FilterContext _localctx = new FilterContext(_ctx, State);
		EnterRule(_localctx, 50, RULE_filter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 377; Match(7);
			State = 378; _localctx._constraint = constraint();
			 _localctx.value = new XElement("Filter", _localctx._constraint.value);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstraintContext : ParserRuleContext {
		public XElement value;
		public BrackettedExpressionContext _brackettedExpression;
		public BuiltInCallContext _builtInCall;
		public FunctionCallContext _functionCall;
		public BrackettedExpressionContext brackettedExpression() {
			return GetRuleContext<BrackettedExpressionContext>(0);
		}
		public BuiltInCallContext builtInCall() {
			return GetRuleContext<BuiltInCallContext>(0);
		}
		public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public ConstraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_constraint; }
		public override void EnterRule(IParseTreeListener listener) {
			IsparqlListener typedListener = listener as IsparqlListener;
			if (typedListener != null) typedListener.EnterConstraint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsparqlListener typedListener = listener as IsparqlListener;
			if (typedListener != null) typedListener.ExitConstraint(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsparqlVisitor<TResult> typedVisitor = visitor as IsparqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstraintContext constraint() {
		ConstraintContext _localctx = new ConstraintContext(_ctx, State);
		EnterRule(_localctx, 52, RULE_constraint);
		try {
			State = 390;
			switch (_input.La(1)) {
			case 43:
				EnterOuterAlt(_localctx, 1);
				{
				State = 381; _localctx._brackettedExpression = brackettedExpression();
				_localctx.value = _localctx._brackettedExpression.value;
				}
				break;
			case 2:
			case 3:
			case 9:
			case 12:
			case 17:
			case 18:
			case 20:
			case 21:
			case 22:
			case 23:
			case 26:
			case 27:
			case 28:
			case 30:
			case 32:
			case 33:
			case 44:
			case 45:
			case 46:
			case 47:
			case 49:
			case 50:
			case 51:
			case 60:
			case 61:
			case 65:
			case 70:
				EnterOuterAlt(_localctx, 2);
				{
				State = 384; _localctx._builtInCall = builtInCall();
				_localctx.value = _localctx._builtInCall.value;
				}
				break;
			case IRI_REF:
			case PREFIXED_NAME:
				EnterOuterAlt(_localctx, 3);
				{
				State = 387; _localctx._functionCall = functionCall();
				_localctx.value = _localctx._functionCall.value;
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionCallContext : ParserRuleContext {
		public XElement value;
		public IRIrefContext _iRIref;
		public ArgListContext _argList;
		public IRIrefContext iRIref() {
			return GetRuleContext<IRIrefContext>(0);
		}
		public ArgListContext argList() {
			return GetRuleContext<ArgListContext>(0);
		}
		public FunctionCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_functionCall; }
		public override void EnterRule(IParseTreeListener listener) {
			IsparqlListener typedListener = listener as IsparqlListener;
			if (typedListener != null) typedListener.EnterFunctionCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsparqlListener typedListener = listener as IsparqlListener;
			if (typedListener != null) typedListener.ExitFunctionCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsparqlVisitor<TResult> typedVisitor = visitor as IsparqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionCallContext functionCall() {
		FunctionCallContext _localctx = new FunctionCallContext(_ctx, State);
		EnterRule(_localctx, 54, RULE_functionCall);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 392; _localctx._iRIref = iRIref();
			State = 393; _localctx._argList = argList();
			_localctx.value = new XElement("func", _localctx._iRIref.value, _localctx._argList.value);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgListContext : ParserRuleContext {
		public List<XElement> value;
		public ExpressionContext main;
		public ExpressionContext second;
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode NIL() { return GetToken(sparqlParser.NIL, 0); }
		public IReadOnlyList<ExpressionContext> expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ArgListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_argList; }
		public override void EnterRule(IParseTreeListener listener) {
			IsparqlListener typedListener = listener as IsparqlListener;
			if (typedListener != null) typedListener.EnterArgList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsparqlListener typedListener = listener as IsparqlListener;
			if (typedListener != null) typedListener.ExitArgList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsparqlVisitor<TResult> typedVisitor = visitor as IsparqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgListContext argList() {
		ArgListContext _localctx = new ArgListContext(_ctx, State);
		EnterRule(_localctx, 56, RULE_argList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 412;
			switch (_input.La(1)) {
			case NIL:
				{
				State = 396; Match(NIL);

				}
				break;
			case 43:
				{
				State = 398; Match(43);
				State = 399; _localctx.main = expression();
				 _localctx.value = new List<XElement>(){ _localctx.main.value }; 
				State = 407;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==39) {
					{
					{
					State = 401; Match(39);
					State = 402; _localctx.second = expression();
					 _localctx.value.Add(_localctx.second.value); 
					}
					}
					State = 409;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 410; Match(19);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstructTemplateContext : ParserRuleContext {
		public XElement value;
		public ConstructTriplesContext _constructTriples;
		public ConstructTriplesContext constructTriples() {
			return GetRuleContext<ConstructTriplesContext>(0);
		}
		public ConstructTemplateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_constructTemplate; }
		public override void EnterRule(IParseTreeListener listener) {
			IsparqlListener typedListener = listener as IsparqlListener;
			if (typedListener != null) typedListener.EnterConstructTemplate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsparqlListener typedListener = listener as IsparqlListener;
			if (typedListener != null) typedListener.ExitConstructTemplate(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsparqlVisitor<TResult> typedVisitor = visitor as IsparqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstructTemplate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstructTemplateContext constructTemplate() {
		ConstructTemplateContext _localctx = new ConstructTemplateContext(_ctx, State);
		EnterRule(_localctx, 58, RULE_constructTemplate);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 414; Match(48);
			State = 418;
			_la = _input.La(1);
			if (_la==4 || _la==43 || ((((_la - 73)) & ~0x3f) == 0 && ((1L << (_la - 73)) & ((1L << (NumericLiteralPositive - 73)) | (1L << (NumericLiteralNegative - 73)) | (1L << (BooleanLiteral - 73)) | (1L << (String - 73)) | (1L << (BlankNode - 73)) | (1L << (IRI_REF - 73)) | (1L << (PREFIXED_NAME - 73)) | (1L << (VAR1 - 73)) | (1L << (VAR2 - 73)) | (1L << (INTEGER - 73)) | (1L << (DECIMAL - 73)) | (1L << (DOUBLE - 73)) | (1L << (NIL - 73)))) != 0)) {
				{
				State = 415; _localctx._constructTriples = constructTriples();
				_localctx.value = new XElement("constructTriples", _localctx._constructTriples.value);
				}
			}

			State = 420; Match(13);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstructTriplesContext : ParserRuleContext {
		public List<XElement> value;
		public TriplesSameSubjectContext _triplesSameSubject;
		public ConstructTriplesContext next;
		public ConstructTriplesContext constructTriples() {
			return GetRuleContext<ConstructTriplesContext>(0);
		}
		public TriplesSameSubjectContext triplesSameSubject() {
			return GetRuleContext<TriplesSameSubjectContext>(0);
		}
		public ConstructTriplesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_constructTriples; }
		public override void EnterRule(IParseTreeListener listener) {
			IsparqlListener typedListener = listener as IsparqlListener;
			if (typedListener != null) typedListener.EnterConstructTriples(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsparqlListener typedListener = listener as IsparqlListener;
			if (typedListener != null) typedListener.ExitConstructTriples(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsparqlVisitor<TResult> typedVisitor = visitor as IsparqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstructTriples(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstructTriplesContext constructTriples() {
		ConstructTriplesContext _localctx = new ConstructTriplesContext(_ctx, State);
		EnterRule(_localctx, 60, RULE_constructTriples);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 422; _localctx._triplesSameSubject = triplesSameSubject();
			 _localctx.value = new List<XElement>(){_localctx._triplesSameSubject.value}; 
			State = 430;
			_la = _input.La(1);
			if (_la==55) {
				{
				State = 424; Match(55);
				State = 428;
				_la = _input.La(1);
				if (_la==4 || _la==43 || ((((_la - 73)) & ~0x3f) == 0 && ((1L << (_la - 73)) & ((1L << (NumericLiteralPositive - 73)) | (1L << (NumericLiteralNegative - 73)) | (1L << (BooleanLiteral - 73)) | (1L << (String - 73)) | (1L << (BlankNode - 73)) | (1L << (IRI_REF - 73)) | (1L << (PREFIXED_NAME - 73)) | (1L << (VAR1 - 73)) | (1L << (VAR2 - 73)) | (1L << (INTEGER - 73)) | (1L << (DECIMAL - 73)) | (1L << (DOUBLE - 73)) | (1L << (NIL - 73)))) != 0)) {
					{
					State = 425; _localctx.next = constructTriples();
					 _localctx.value.AddRange(_localctx.next.value); 
					}
				}

				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TriplesSameSubjectContext : ParserRuleContext {
		public XElement value;
		public VarOrTermContext _varOrTerm;
		public PropertyListNotEmptyContext _propertyListNotEmpty;
		public TriplesNodeContext _triplesNode;
		public PropertyListContext _propertyList;
		public TriplesNodeContext triplesNode() {
			return GetRuleContext<TriplesNodeContext>(0);
		}
		public PropertyListContext propertyList() {
			return GetRuleContext<PropertyListContext>(0);
		}
		public PropertyListNotEmptyContext propertyListNotEmpty() {
			return GetRuleContext<PropertyListNotEmptyContext>(0);
		}
		public VarOrTermContext varOrTerm() {
			return GetRuleContext<VarOrTermContext>(0);
		}
		public TriplesSameSubjectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_triplesSameSubject; }
		public override void EnterRule(IParseTreeListener listener) {
			IsparqlListener typedListener = listener as IsparqlListener;
			if (typedListener != null) typedListener.EnterTriplesSameSubject(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsparqlListener typedListener = listener as IsparqlListener;
			if (typedListener != null) typedListener.ExitTriplesSameSubject(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsparqlVisitor<TResult> typedVisitor = visitor as IsparqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTriplesSameSubject(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TriplesSameSubjectContext triplesSameSubject() {
		TriplesSameSubjectContext _localctx = new TriplesSameSubjectContext(_ctx, State);
		EnterRule(_localctx, 62, RULE_triplesSameSubject);
		try {
			State = 440;
			switch (_input.La(1)) {
			case NumericLiteralPositive:
			case NumericLiteralNegative:
			case BooleanLiteral:
			case String:
			case BlankNode:
			case IRI_REF:
			case PREFIXED_NAME:
			case VAR1:
			case VAR2:
			case INTEGER:
			case DECIMAL:
			case DOUBLE:
			case NIL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 432; _localctx._varOrTerm = varOrTerm();
				State = 433; _localctx._propertyListNotEmpty = propertyListNotEmpty();
				 _localctx.value =  new XElement("s", _localctx._varOrTerm.value, _localctx._propertyListNotEmpty.value);
				}
				break;
			case 4:
			case 43:
				EnterOuterAlt(_localctx, 2);
				{
				State = 436; _localctx._triplesNode = triplesNode();
				State = 437; _localctx._propertyList = propertyList();
				 _localctx.value =  new XElement("tripletsGroup", _localctx._triplesNode.value, _localctx._propertyList.value);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyListNotEmptyContext : ParserRuleContext {
		public List<XElement> value;
		public VerbContext v0;
		public ObjectListContext o0;
		public VerbContext v1;
		public ObjectListContext o1;
		public IReadOnlyList<VerbContext> verb() {
			return GetRuleContexts<VerbContext>();
		}
		public VerbContext verb(int i) {
			return GetRuleContext<VerbContext>(i);
		}
		public ObjectListContext objectList(int i) {
			return GetRuleContext<ObjectListContext>(i);
		}
		public IReadOnlyList<ObjectListContext> objectList() {
			return GetRuleContexts<ObjectListContext>();
		}
		public PropertyListNotEmptyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_propertyListNotEmpty; }
		public override void EnterRule(IParseTreeListener listener) {
			IsparqlListener typedListener = listener as IsparqlListener;
			if (typedListener != null) typedListener.EnterPropertyListNotEmpty(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsparqlListener typedListener = listener as IsparqlListener;
			if (typedListener != null) typedListener.ExitPropertyListNotEmpty(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsparqlVisitor<TResult> typedVisitor = visitor as IsparqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertyListNotEmpty(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertyListNotEmptyContext propertyListNotEmpty() {
		PropertyListNotEmptyContext _localctx = new PropertyListNotEmptyContext(_ctx, State);
		EnterRule(_localctx, 64, RULE_propertyListNotEmpty);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 442; _localctx.v0 = verb();
			State = 443; _localctx.o0 = objectList();
			  _localctx.value = new List<XElement>(){new XElement("p", _localctx.v0.value, _localctx.o0.value)};
			State = 454;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==58) {
				{
				{
				State = 445; Match(58);
				State = 450;
				_la = _input.La(1);
				if (((((_la - 54)) & ~0x3f) == 0 && ((1L << (_la - 54)) & ((1L << (54 - 54)) | (1L << (IRI_REF - 54)) | (1L << (PREFIXED_NAME - 54)) | (1L << (VAR1 - 54)) | (1L << (VAR2 - 54)))) != 0)) {
					{
					State = 446; _localctx.v1 = verb();
					State = 447; _localctx.o1 = objectList();
					 _localctx.value.Add(new XElement("p",  _localctx.v1.value, _localctx.o1.value));
					}
				}

				}
				}
				State = 456;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyListContext : ParserRuleContext {
		public XElement value;
		public PropertyListNotEmptyContext _propertyListNotEmpty;
		public PropertyListNotEmptyContext propertyListNotEmpty() {
			return GetRuleContext<PropertyListNotEmptyContext>(0);
		}
		public PropertyListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_propertyList; }
		public override void EnterRule(IParseTreeListener listener) {
			IsparqlListener typedListener = listener as IsparqlListener;
			if (typedListener != null) typedListener.EnterPropertyList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsparqlListener typedListener = listener as IsparqlListener;
			if (typedListener != null) typedListener.ExitPropertyList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsparqlVisitor<TResult> typedVisitor = visitor as IsparqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertyList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertyListContext propertyList() {
		PropertyListContext _localctx = new PropertyListContext(_ctx, State);
		EnterRule(_localctx, 66, RULE_propertyList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 460;
			_la = _input.La(1);
			if (((((_la - 54)) & ~0x3f) == 0 && ((1L << (_la - 54)) & ((1L << (54 - 54)) | (1L << (IRI_REF - 54)) | (1L << (PREFIXED_NAME - 54)) | (1L << (VAR1 - 54)) | (1L << (VAR2 - 54)))) != 0)) {
				{
				State = 457; _localctx._propertyListNotEmpty = propertyListNotEmpty();
				 _localctx.value =  new XElement("propertyList", _localctx._propertyListNotEmpty.value); 
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectListContext : ParserRuleContext {
		public List<XElement> value;
		public ObjectContext o0;
		public ObjectContext o1;
		public ObjectContext @object(int i) {
			return GetRuleContext<ObjectContext>(i);
		}
		public IReadOnlyList<ObjectContext> @object() {
			return GetRuleContexts<ObjectContext>();
		}
		public ObjectListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_objectList; }
		public override void EnterRule(IParseTreeListener listener) {
			IsparqlListener typedListener = listener as IsparqlListener;
			if (typedListener != null) typedListener.EnterObjectList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsparqlListener typedListener = listener as IsparqlListener;
			if (typedListener != null) typedListener.ExitObjectList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsparqlVisitor<TResult> typedVisitor = visitor as IsparqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObjectList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ObjectListContext objectList() {
		ObjectListContext _localctx = new ObjectListContext(_ctx, State);
		EnterRule(_localctx, 68, RULE_objectList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 462; _localctx.o0 = @object();
				 _localctx.value = new List<XElement>(){_localctx.o0.value}; 
			State = 470;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==39) {
				{
				{
				State = 464; Match(39);
				State = 465; _localctx.o1 = @object();
					 _localctx.value.Add(_localctx.o1.value); 
				}
				}
				State = 472;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectContext : ParserRuleContext {
		public XElement value;
		public GraphNodeContext _graphNode;
		public GraphNodeContext graphNode() {
			return GetRuleContext<GraphNodeContext>(0);
		}
		public ObjectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_object; }
		public override void EnterRule(IParseTreeListener listener) {
			IsparqlListener typedListener = listener as IsparqlListener;
			if (typedListener != null) typedListener.EnterObject(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsparqlListener typedListener = listener as IsparqlListener;
			if (typedListener != null) typedListener.ExitObject(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsparqlVisitor<TResult> typedVisitor = visitor as IsparqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObject(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ObjectContext @object() {
		ObjectContext _localctx = new ObjectContext(_ctx, State);
		EnterRule(_localctx, 70, RULE_object);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 473; _localctx._graphNode = graphNode();
				_localctx.value =  new XElement("o", _localctx._graphNode.value); 
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VerbContext : ParserRuleContext {
		public XElement value;
		public VarOrIRIrefContext _varOrIRIref;
		public VarOrIRIrefContext varOrIRIref() {
			return GetRuleContext<VarOrIRIrefContext>(0);
		}
		public VerbContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_verb; }
		public override void EnterRule(IParseTreeListener listener) {
			IsparqlListener typedListener = listener as IsparqlListener;
			if (typedListener != null) typedListener.EnterVerb(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsparqlListener typedListener = listener as IsparqlListener;
			if (typedListener != null) typedListener.ExitVerb(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsparqlVisitor<TResult> typedVisitor = visitor as IsparqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVerb(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VerbContext verb() {
		VerbContext _localctx = new VerbContext(_ctx, State);
		EnterRule(_localctx, 72, RULE_verb);
		try {
			State = 481;
			switch (_input.La(1)) {
			case IRI_REF:
			case PREFIXED_NAME:
			case VAR1:
			case VAR2:
				EnterOuterAlt(_localctx, 1);
				{
				State = 476; _localctx._varOrIRIref = varOrIRIref();
					_localctx.value = _localctx._varOrIRIref.value; 
				}
				break;
			case 54:
				EnterOuterAlt(_localctx, 2);
				{
				State = 479; Match(54);
					_localctx.value =  new XElement("iRIref", "rdf type"); 
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TriplesNodeContext : ParserRuleContext {
		public XElement value;
		public CollectionContext _collection;
		public BlankNodePropertyListContext _blankNodePropertyList;
		public BlankNodePropertyListContext blankNodePropertyList() {
			return GetRuleContext<BlankNodePropertyListContext>(0);
		}
		public CollectionContext collection() {
			return GetRuleContext<CollectionContext>(0);
		}
		public TriplesNodeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_triplesNode; }
		public override void EnterRule(IParseTreeListener listener) {
			IsparqlListener typedListener = listener as IsparqlListener;
			if (typedListener != null) typedListener.EnterTriplesNode(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsparqlListener typedListener = listener as IsparqlListener;
			if (typedListener != null) typedListener.ExitTriplesNode(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsparqlVisitor<TResult> typedVisitor = visitor as IsparqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTriplesNode(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TriplesNodeContext triplesNode() {
		TriplesNodeContext _localctx = new TriplesNodeContext(_ctx, State);
		EnterRule(_localctx, 74, RULE_triplesNode);
		try {
			State = 489;
			switch (_input.La(1)) {
			case 43:
				EnterOuterAlt(_localctx, 1);
				{
				State = 483; _localctx._collection = collection();
				_localctx.value = new XElement("collection",_localctx._collection.value);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 2);
				{
				State = 486; _localctx._blankNodePropertyList = blankNodePropertyList();
				_localctx.value = new XElement("blankNodePropertyList", _localctx._blankNodePropertyList.value);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlankNodePropertyListContext : ParserRuleContext {
		public List<XElement> value;
		public PropertyListNotEmptyContext _propertyListNotEmpty;
		public PropertyListNotEmptyContext propertyListNotEmpty() {
			return GetRuleContext<PropertyListNotEmptyContext>(0);
		}
		public BlankNodePropertyListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_blankNodePropertyList; }
		public override void EnterRule(IParseTreeListener listener) {
			IsparqlListener typedListener = listener as IsparqlListener;
			if (typedListener != null) typedListener.EnterBlankNodePropertyList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsparqlListener typedListener = listener as IsparqlListener;
			if (typedListener != null) typedListener.ExitBlankNodePropertyList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsparqlVisitor<TResult> typedVisitor = visitor as IsparqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlankNodePropertyList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlankNodePropertyListContext blankNodePropertyList() {
		BlankNodePropertyListContext _localctx = new BlankNodePropertyListContext(_ctx, State);
		EnterRule(_localctx, 76, RULE_blankNodePropertyList);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 491; Match(4);
			State = 492; _localctx._propertyListNotEmpty = propertyListNotEmpty();
			State = 493; Match(36);
				_localctx.value = _localctx._propertyListNotEmpty.value; 
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CollectionContext : ParserRuleContext {
		public List<XElement> value;
		public GraphNodeContext _graphNode;
		public IReadOnlyList<GraphNodeContext> graphNode() {
			return GetRuleContexts<GraphNodeContext>();
		}
		public GraphNodeContext graphNode(int i) {
			return GetRuleContext<GraphNodeContext>(i);
		}
		public CollectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_collection; }
		public override void EnterRule(IParseTreeListener listener) {
			IsparqlListener typedListener = listener as IsparqlListener;
			if (typedListener != null) typedListener.EnterCollection(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsparqlListener typedListener = listener as IsparqlListener;
			if (typedListener != null) typedListener.ExitCollection(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsparqlVisitor<TResult> typedVisitor = visitor as IsparqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCollection(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CollectionContext collection() {
		CollectionContext _localctx = new CollectionContext(_ctx, State);
		EnterRule(_localctx, 78, RULE_collection);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 496; Match(43);
			_localctx.value =  new List<XElement>();
			State = 501;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 498; _localctx._graphNode = graphNode();
					_localctx.value.Add(_localctx._graphNode.value); 
				}
				}
				State = 503;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==4 || _la==43 || ((((_la - 73)) & ~0x3f) == 0 && ((1L << (_la - 73)) & ((1L << (NumericLiteralPositive - 73)) | (1L << (NumericLiteralNegative - 73)) | (1L << (BooleanLiteral - 73)) | (1L << (String - 73)) | (1L << (BlankNode - 73)) | (1L << (IRI_REF - 73)) | (1L << (PREFIXED_NAME - 73)) | (1L << (VAR1 - 73)) | (1L << (VAR2 - 73)) | (1L << (INTEGER - 73)) | (1L << (DECIMAL - 73)) | (1L << (DOUBLE - 73)) | (1L << (NIL - 73)))) != 0) );
			State = 505; Match(19);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GraphNodeContext : ParserRuleContext {
		public XElement value;
		public VarOrTermContext _varOrTerm;
		public TriplesNodeContext triplesNode() {
			return GetRuleContext<TriplesNodeContext>(0);
		}
		public VarOrTermContext varOrTerm() {
			return GetRuleContext<VarOrTermContext>(0);
		}
		public GraphNodeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_graphNode; }
		public override void EnterRule(IParseTreeListener listener) {
			IsparqlListener typedListener = listener as IsparqlListener;
			if (typedListener != null) typedListener.EnterGraphNode(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsparqlListener typedListener = listener as IsparqlListener;
			if (typedListener != null) typedListener.ExitGraphNode(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsparqlVisitor<TResult> typedVisitor = visitor as IsparqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGraphNode(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GraphNodeContext graphNode() {
		GraphNodeContext _localctx = new GraphNodeContext(_ctx, State);
		EnterRule(_localctx, 80, RULE_graphNode);
		try {
			State = 511;
			switch (_input.La(1)) {
			case NumericLiteralPositive:
			case NumericLiteralNegative:
			case BooleanLiteral:
			case String:
			case BlankNode:
			case IRI_REF:
			case PREFIXED_NAME:
			case VAR1:
			case VAR2:
			case INTEGER:
			case DECIMAL:
			case DOUBLE:
			case NIL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 507; _localctx._varOrTerm = varOrTerm();
				_localctx.value = _localctx._varOrTerm.value; 
				}
				break;
			case 4:
			case 43:
				EnterOuterAlt(_localctx, 2);
				{
				State = 510; triplesNode();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarOrTermContext : ParserRuleContext {
		public XElement value;
		public VarContext _var;
		public GraphTermContext _graphTerm;
		public GraphTermContext graphTerm() {
			return GetRuleContext<GraphTermContext>(0);
		}
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public VarOrTermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_varOrTerm; }
		public override void EnterRule(IParseTreeListener listener) {
			IsparqlListener typedListener = listener as IsparqlListener;
			if (typedListener != null) typedListener.EnterVarOrTerm(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsparqlListener typedListener = listener as IsparqlListener;
			if (typedListener != null) typedListener.ExitVarOrTerm(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsparqlVisitor<TResult> typedVisitor = visitor as IsparqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarOrTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarOrTermContext varOrTerm() {
		VarOrTermContext _localctx = new VarOrTermContext(_ctx, State);
		EnterRule(_localctx, 82, RULE_varOrTerm);
		try {
			State = 519;
			switch (_input.La(1)) {
			case VAR1:
			case VAR2:
				EnterOuterAlt(_localctx, 1);
				{
				State = 513; _localctx._var = var();
					         _localctx.value =  new XElement("var", (_localctx._var!=null?_input.GetText(_localctx._var.start,_localctx._var.stop):null)); 
				}
				break;
			case NumericLiteralPositive:
			case NumericLiteralNegative:
			case BooleanLiteral:
			case String:
			case BlankNode:
			case IRI_REF:
			case PREFIXED_NAME:
			case INTEGER:
			case DECIMAL:
			case DOUBLE:
			case NIL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 516; _localctx._graphTerm = graphTerm();
					         _localctx.value =  _localctx._graphTerm.value; 
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarOrIRIrefContext : ParserRuleContext {
		public XElement value;
		public VarContext _var;
		public IRIrefContext _iRIref;
		public IRIrefContext iRIref() {
			return GetRuleContext<IRIrefContext>(0);
		}
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public VarOrIRIrefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_varOrIRIref; }
		public override void EnterRule(IParseTreeListener listener) {
			IsparqlListener typedListener = listener as IsparqlListener;
			if (typedListener != null) typedListener.EnterVarOrIRIref(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsparqlListener typedListener = listener as IsparqlListener;
			if (typedListener != null) typedListener.ExitVarOrIRIref(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsparqlVisitor<TResult> typedVisitor = visitor as IsparqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarOrIRIref(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarOrIRIrefContext varOrIRIref() {
		VarOrIRIrefContext _localctx = new VarOrIRIrefContext(_ctx, State);
		EnterRule(_localctx, 84, RULE_varOrIRIref);
		try {
			State = 527;
			switch (_input.La(1)) {
			case VAR1:
			case VAR2:
				EnterOuterAlt(_localctx, 1);
				{
				State = 521; _localctx._var = var();
					         _localctx.value =  _localctx._var.value; 
				}
				break;
			case IRI_REF:
			case PREFIXED_NAME:
				EnterOuterAlt(_localctx, 2);
				{
				State = 524; _localctx._iRIref = iRIref();
					         _localctx.value =  _localctx._iRIref.value; 
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarContext : ParserRuleContext {
		public XElement value;
		public IToken _VAR1;
		public IToken _VAR2;
		public ITerminalNode VAR2() { return GetToken(sparqlParser.VAR2, 0); }
		public ITerminalNode VAR1() { return GetToken(sparqlParser.VAR1, 0); }
		public VarContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_var; }
		public override void EnterRule(IParseTreeListener listener) {
			IsparqlListener typedListener = listener as IsparqlListener;
			if (typedListener != null) typedListener.EnterVar(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsparqlListener typedListener = listener as IsparqlListener;
			if (typedListener != null) typedListener.ExitVar(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsparqlVisitor<TResult> typedVisitor = visitor as IsparqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVar(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarContext var() {
		VarContext _localctx = new VarContext(_ctx, State);
		EnterRule(_localctx, 86, RULE_var);
		try {
			State = 533;
			switch (_input.La(1)) {
			case VAR1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 529; _localctx._VAR1 = Match(VAR1);
				 _localctx.value =  new XElement("var", (_localctx._VAR1!=null?_localctx._VAR1.Text:null)); 
				}
				break;
			case VAR2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 531; _localctx._VAR2 = Match(VAR2);
				 _localctx.value =  new XElement("var", (_localctx._VAR2!=null?_localctx._VAR2.Text:null)); 
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GraphTermContext : ParserRuleContext {
		public XElement value;
		public IRIrefContext _iRIref;
		public RDFLiteralContext _rDFLiteral;
		public NumericLiteralContext _numericLiteral;
		public IToken _BooleanLiteral;
		public IToken _BlankNode;
		public RDFLiteralContext rDFLiteral() {
			return GetRuleContext<RDFLiteralContext>(0);
		}
		public ITerminalNode BlankNode() { return GetToken(sparqlParser.BlankNode, 0); }
		public IRIrefContext iRIref() {
			return GetRuleContext<IRIrefContext>(0);
		}
		public ITerminalNode NIL() { return GetToken(sparqlParser.NIL, 0); }
		public ITerminalNode BooleanLiteral() { return GetToken(sparqlParser.BooleanLiteral, 0); }
		public NumericLiteralContext numericLiteral() {
			return GetRuleContext<NumericLiteralContext>(0);
		}
		public GraphTermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_graphTerm; }
		public override void EnterRule(IParseTreeListener listener) {
			IsparqlListener typedListener = listener as IsparqlListener;
			if (typedListener != null) typedListener.EnterGraphTerm(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsparqlListener typedListener = listener as IsparqlListener;
			if (typedListener != null) typedListener.ExitGraphTerm(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsparqlVisitor<TResult> typedVisitor = visitor as IsparqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGraphTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GraphTermContext graphTerm() {
		GraphTermContext _localctx = new GraphTermContext(_ctx, State);
		EnterRule(_localctx, 88, RULE_graphTerm);
		try {
			State = 550;
			switch (_input.La(1)) {
			case IRI_REF:
			case PREFIXED_NAME:
				EnterOuterAlt(_localctx, 1);
				{
				State = 535; _localctx._iRIref = iRIref();
					 _localctx.value =   _localctx._iRIref.value; 
				}
				break;
			case String:
				EnterOuterAlt(_localctx, 2);
				{
				State = 538; _localctx._rDFLiteral = rDFLiteral();
					 _localctx.value =  new XElement("rDFLiteral", (_localctx._rDFLiteral!=null?_input.GetText(_localctx._rDFLiteral.start,_localctx._rDFLiteral.stop):null)); 
				}
				break;
			case NumericLiteralPositive:
			case NumericLiteralNegative:
			case INTEGER:
			case DECIMAL:
			case DOUBLE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 541; _localctx._numericLiteral = numericLiteral();
					 _localctx.value =  new XElement("numericLiteral", (_localctx._numericLiteral!=null?_input.GetText(_localctx._numericLiteral.start,_localctx._numericLiteral.stop):null)); 
				}
				break;
			case BooleanLiteral:
				EnterOuterAlt(_localctx, 4);
				{
				State = 544; _localctx._BooleanLiteral = Match(BooleanLiteral);
					 _localctx.value =  new XElement("BooleanLiteral", (_localctx._BooleanLiteral!=null?_localctx._BooleanLiteral.Text:null)); 
				}
				break;
			case BlankNode:
				EnterOuterAlt(_localctx, 5);
				{
				State = 546; _localctx._BlankNode = Match(BlankNode);
					 _localctx.value =  new XElement("BlankNode", (_localctx._BlankNode!=null?_localctx._BlankNode.Text:null)); 
				}
				break;
			case NIL:
				EnterOuterAlt(_localctx, 6);
				{
				State = 548; Match(NIL);
					 _localctx.value =  new XElement("NIL"); 
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public XElement value;
		public ConditionalOrExpressionContext _conditionalOrExpression;
		public ConditionalOrExpressionContext conditionalOrExpression() {
			return GetRuleContext<ConditionalOrExpressionContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_expression; }
		public override void EnterRule(IParseTreeListener listener) {
			IsparqlListener typedListener = listener as IsparqlListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsparqlListener typedListener = listener as IsparqlListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsparqlVisitor<TResult> typedVisitor = visitor as IsparqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(_ctx, State);
		EnterRule(_localctx, 90, RULE_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 552; _localctx._conditionalOrExpression = conditionalOrExpression();
			_localctx.value = _localctx._conditionalOrExpression.value;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionalOrExpressionContext : ParserRuleContext {
		public XElement value;
		public ConditionalAndExpressionContext _conditionalAndExpression;
		public ConditionalAndExpressionContext conditionalAndExpression(int i) {
			return GetRuleContext<ConditionalAndExpressionContext>(i);
		}
		public IReadOnlyList<ConditionalAndExpressionContext> conditionalAndExpression() {
			return GetRuleContexts<ConditionalAndExpressionContext>();
		}
		public ConditionalOrExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_conditionalOrExpression; }
		public override void EnterRule(IParseTreeListener listener) {
			IsparqlListener typedListener = listener as IsparqlListener;
			if (typedListener != null) typedListener.EnterConditionalOrExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsparqlListener typedListener = listener as IsparqlListener;
			if (typedListener != null) typedListener.ExitConditionalOrExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsparqlVisitor<TResult> typedVisitor = visitor as IsparqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditionalOrExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionalOrExpressionContext conditionalOrExpression() {
		ConditionalOrExpressionContext _localctx = new ConditionalOrExpressionContext(_ctx, State);
		EnterRule(_localctx, 92, RULE_conditionalOrExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 555; _localctx._conditionalAndExpression = conditionalAndExpression();
			_localctx.value = _localctx._conditionalAndExpression.value;
			State = 563;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==63) {
				{
				{
				State = 557; Match(63);
				State = 558; _localctx._conditionalAndExpression = conditionalAndExpression();
				_localctx.value = new XElement("or", _localctx.value, _localctx._conditionalAndExpression.value);
				}
				}
				State = 565;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionalAndExpressionContext : ParserRuleContext {
		public XElement value;
		public ValueLogicalContext main;
		public ValueLogicalContext alt;
		public IReadOnlyList<ValueLogicalContext> valueLogical() {
			return GetRuleContexts<ValueLogicalContext>();
		}
		public ValueLogicalContext valueLogical(int i) {
			return GetRuleContext<ValueLogicalContext>(i);
		}
		public ConditionalAndExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_conditionalAndExpression; }
		public override void EnterRule(IParseTreeListener listener) {
			IsparqlListener typedListener = listener as IsparqlListener;
			if (typedListener != null) typedListener.EnterConditionalAndExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsparqlListener typedListener = listener as IsparqlListener;
			if (typedListener != null) typedListener.ExitConditionalAndExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsparqlVisitor<TResult> typedVisitor = visitor as IsparqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditionalAndExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionalAndExpressionContext conditionalAndExpression() {
		ConditionalAndExpressionContext _localctx = new ConditionalAndExpressionContext(_ctx, State);
		EnterRule(_localctx, 94, RULE_conditionalAndExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 566; _localctx.main = valueLogical();
			_localctx.value = _localctx.main.value;
			State = 574;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==62) {
				{
				{
				State = 568; Match(62);
				State = 569; _localctx.alt = valueLogical();
				_localctx.value = new XElement("and",  _localctx.value, _localctx.alt.value); 
				}
				}
				State = 576;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueLogicalContext : ParserRuleContext {
		public XElement value;
		public RelationalExpressionContext _relationalExpression;
		public RelationalExpressionContext relationalExpression() {
			return GetRuleContext<RelationalExpressionContext>(0);
		}
		public ValueLogicalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_valueLogical; }
		public override void EnterRule(IParseTreeListener listener) {
			IsparqlListener typedListener = listener as IsparqlListener;
			if (typedListener != null) typedListener.EnterValueLogical(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsparqlListener typedListener = listener as IsparqlListener;
			if (typedListener != null) typedListener.ExitValueLogical(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsparqlVisitor<TResult> typedVisitor = visitor as IsparqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValueLogical(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValueLogicalContext valueLogical() {
		ValueLogicalContext _localctx = new ValueLogicalContext(_ctx, State);
		EnterRule(_localctx, 96, RULE_valueLogical);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 577; _localctx._relationalExpression = relationalExpression();
			 _localctx.value = _localctx._relationalExpression.value; 
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RelationalExpressionContext : ParserRuleContext {
		public XElement value;
		public NumericExpressionContext main;
		public NumericExpressionContext second;
		public IReadOnlyList<NumericExpressionContext> numericExpression() {
			return GetRuleContexts<NumericExpressionContext>();
		}
		public NumericExpressionContext numericExpression(int i) {
			return GetRuleContext<NumericExpressionContext>(i);
		}
		public RelationalExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_relationalExpression; }
		public override void EnterRule(IParseTreeListener listener) {
			IsparqlListener typedListener = listener as IsparqlListener;
			if (typedListener != null) typedListener.EnterRelationalExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsparqlListener typedListener = listener as IsparqlListener;
			if (typedListener != null) typedListener.ExitRelationalExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsparqlVisitor<TResult> typedVisitor = visitor as IsparqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelationalExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RelationalExpressionContext relationalExpression() {
		RelationalExpressionContext _localctx = new RelationalExpressionContext(_ctx, State);
		EnterRule(_localctx, 98, RULE_relationalExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 580; _localctx.main = numericExpression();
			 _localctx.value = _localctx.main.value; 
			State = 606;
			switch (_input.La(1)) {
			case 25:
				{
				State = 582; Match(25);
				State = 583; _localctx.second = numericExpression();
				 _localctx.value = new XElement("eq",  _localctx.value, _localctx.second.value); 
				}
				break;
			case 10:
				{
				State = 586; Match(10);
				State = 587; _localctx.second = numericExpression();
				 _localctx.value = new XElement("eqNot",  _localctx.value, _localctx.second.value); 
				}
				break;
			case 8:
				{
				State = 590; Match(8);
				State = 591; _localctx.second = numericExpression();
				 _localctx.value = new XElement("les",  _localctx.value, _localctx.second.value); 
				}
				break;
			case 64:
				{
				State = 594; Match(64);
				State = 595; _localctx.second = numericExpression();
				 _localctx.value = new XElement("more",  _localctx.value, _localctx.second.value); 
				}
				break;
			case 11:
				{
				State = 598; Match(11);
				State = 599; _localctx.second = numericExpression();
				 _localctx.value = new XElement("lesEq",  _localctx.value, _localctx.second.value); 
				}
				break;
			case 69:
				{
				State = 602; Match(69);
				State = 603; _localctx.second = numericExpression();
				 _localctx.value = new XElement("moreEq",  _localctx.value, _localctx.second.value); 
				}
				break;
			case 19:
			case 39:
			case 62:
			case 63:
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumericExpressionContext : ParserRuleContext {
		public XElement value;
		public AdditiveExpressionContext _additiveExpression;
		public AdditiveExpressionContext additiveExpression() {
			return GetRuleContext<AdditiveExpressionContext>(0);
		}
		public NumericExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_numericExpression; }
		public override void EnterRule(IParseTreeListener listener) {
			IsparqlListener typedListener = listener as IsparqlListener;
			if (typedListener != null) typedListener.EnterNumericExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsparqlListener typedListener = listener as IsparqlListener;
			if (typedListener != null) typedListener.ExitNumericExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsparqlVisitor<TResult> typedVisitor = visitor as IsparqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumericExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumericExpressionContext numericExpression() {
		NumericExpressionContext _localctx = new NumericExpressionContext(_ctx, State);
		EnterRule(_localctx, 100, RULE_numericExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 608; _localctx._additiveExpression = additiveExpression();
			 _localctx.value = _localctx._additiveExpression.value; 
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AdditiveExpressionContext : ParserRuleContext {
		public XElement value;
		public MultiplicativeExpressionContext main;
		public MultiplicativeExpressionContext second;
		public IToken _NumericLiteralPositive;
		public IToken _NumericLiteralNegative;
		public ITerminalNode NumericLiteralNegative(int i) {
			return GetToken(sparqlParser.NumericLiteralNegative, i);
		}
		public MultiplicativeExpressionContext multiplicativeExpression(int i) {
			return GetRuleContext<MultiplicativeExpressionContext>(i);
		}
		public ITerminalNode NumericLiteralPositive(int i) {
			return GetToken(sparqlParser.NumericLiteralPositive, i);
		}
		public IReadOnlyList<MultiplicativeExpressionContext> multiplicativeExpression() {
			return GetRuleContexts<MultiplicativeExpressionContext>();
		}
		public IReadOnlyList<ITerminalNode> NumericLiteralPositive() { return GetTokens(sparqlParser.NumericLiteralPositive); }
		public IReadOnlyList<ITerminalNode> NumericLiteralNegative() { return GetTokens(sparqlParser.NumericLiteralNegative); }
		public AdditiveExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_additiveExpression; }
		public override void EnterRule(IParseTreeListener listener) {
			IsparqlListener typedListener = listener as IsparqlListener;
			if (typedListener != null) typedListener.EnterAdditiveExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsparqlListener typedListener = listener as IsparqlListener;
			if (typedListener != null) typedListener.ExitAdditiveExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsparqlVisitor<TResult> typedVisitor = visitor as IsparqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdditiveExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AdditiveExpressionContext additiveExpression() {
		AdditiveExpressionContext _localctx = new AdditiveExpressionContext(_ctx, State);
		EnterRule(_localctx, 102, RULE_additiveExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 611; _localctx.main = multiplicativeExpression();
			 _localctx.value = _localctx.main.value; 
			State = 627;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (((((_la - 42)) & ~0x3f) == 0 && ((1L << (_la - 42)) & ((1L << (42 - 42)) | (1L << (57 - 42)) | (1L << (NumericLiteralPositive - 42)) | (1L << (NumericLiteralNegative - 42)))) != 0)) {
				{
				State = 625;
				switch (_input.La(1)) {
				case 57:
					{
					State = 613; Match(57);
					State = 614; _localctx.second = multiplicativeExpression();
					 _localctx.value = new XElement("plus",  _localctx.value, _localctx.second.value); 
					}
					break;
				case 42:
					{
					State = 617; Match(42);
					State = 618; _localctx.second = multiplicativeExpression();
					 _localctx.value = new XElement("mines", _localctx.value, _localctx.second.value); 
					}
					break;
				case NumericLiteralPositive:
					{
					State = 621; _localctx._NumericLiteralPositive = Match(NumericLiteralPositive);
					 _localctx.value =  new XElement("NumericLiteralPositive", (_localctx._NumericLiteralPositive!=null?_localctx._NumericLiteralPositive.Text:null)); 
					}
					break;
				case NumericLiteralNegative:
					{
					State = 623; _localctx._NumericLiteralNegative = Match(NumericLiteralNegative);
					 _localctx.value = new XElement("NumericLiteralNegative", (_localctx._NumericLiteralNegative!=null?_localctx._NumericLiteralNegative.Text:null)); 
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 629;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultiplicativeExpressionContext : ParserRuleContext {
		public XElement value;
		public UnaryExpressionContext main;
		public UnaryExpressionContext second;
		public IReadOnlyList<UnaryExpressionContext> unaryExpression() {
			return GetRuleContexts<UnaryExpressionContext>();
		}
		public UnaryExpressionContext unaryExpression(int i) {
			return GetRuleContext<UnaryExpressionContext>(i);
		}
		public MultiplicativeExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_multiplicativeExpression; }
		public override void EnterRule(IParseTreeListener listener) {
			IsparqlListener typedListener = listener as IsparqlListener;
			if (typedListener != null) typedListener.EnterMultiplicativeExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsparqlListener typedListener = listener as IsparqlListener;
			if (typedListener != null) typedListener.ExitMultiplicativeExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsparqlVisitor<TResult> typedVisitor = visitor as IsparqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplicativeExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultiplicativeExpressionContext multiplicativeExpression() {
		MultiplicativeExpressionContext _localctx = new MultiplicativeExpressionContext(_ctx, State);
		EnterRule(_localctx, 104, RULE_multiplicativeExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 630; _localctx.main = unaryExpression();
			 _localctx.value = _localctx.main.value; 
			State = 642;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==6 || _la==68) {
				{
				State = 640;
				switch (_input.La(1)) {
				case 6:
					{
					State = 632; Match(6);
					State = 633; _localctx.second = unaryExpression();
					 _localctx.value = new XElement("mult", _localctx.value, _localctx.second.value); 
					}
					break;
				case 68:
					{
					State = 636; Match(68);
					State = 637; _localctx.second = unaryExpression();
					 _localctx.value = new XElement("div",  _localctx.value, _localctx.second.value); 
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 644;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnaryExpressionContext : ParserRuleContext {
		public XElement value;
		public PrimaryExpressionContext second;
		public PrimaryExpressionContext main;
		public PrimaryExpressionContext primaryExpression() {
			return GetRuleContext<PrimaryExpressionContext>(0);
		}
		public UnaryExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_unaryExpression; }
		public override void EnterRule(IParseTreeListener listener) {
			IsparqlListener typedListener = listener as IsparqlListener;
			if (typedListener != null) typedListener.EnterUnaryExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsparqlListener typedListener = listener as IsparqlListener;
			if (typedListener != null) typedListener.ExitUnaryExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsparqlVisitor<TResult> typedVisitor = visitor as IsparqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnaryExpressionContext unaryExpression() {
		UnaryExpressionContext _localctx = new UnaryExpressionContext(_ctx, State);
		EnterRule(_localctx, 106, RULE_unaryExpression);
		try {
			State = 660;
			switch (_input.La(1)) {
			case 34:
				EnterOuterAlt(_localctx, 1);
				{
				State = 645; Match(34);
				State = 646; _localctx.second = primaryExpression();
				 _localctx.value = new XElement("not",   _localctx.second.value); 
				}
				break;
			case 57:
				EnterOuterAlt(_localctx, 2);
				{
				State = 649; Match(57);
				State = 650; _localctx.second = primaryExpression();
				 _localctx.value = new XElement("plus",  _localctx.second.value); 
				}
				break;
			case 42:
				EnterOuterAlt(_localctx, 3);
				{
				State = 653; Match(42);
				State = 654; _localctx.second = primaryExpression();
				 _localctx.value = new XElement("div",   _localctx.second.value); 
				}
				break;
			case 2:
			case 3:
			case 9:
			case 12:
			case 17:
			case 18:
			case 20:
			case 21:
			case 22:
			case 23:
			case 26:
			case 27:
			case 28:
			case 30:
			case 32:
			case 33:
			case 43:
			case 44:
			case 45:
			case 46:
			case 47:
			case 49:
			case 50:
			case 51:
			case 60:
			case 61:
			case 65:
			case 70:
			case NumericLiteralPositive:
			case NumericLiteralNegative:
			case BooleanLiteral:
			case String:
			case IRI_REF:
			case PREFIXED_NAME:
			case VAR1:
			case VAR2:
			case INTEGER:
			case DECIMAL:
			case DOUBLE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 657; _localctx.main = primaryExpression();
				 _localctx.value = _localctx.main.value; 
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimaryExpressionContext : ParserRuleContext {
		public XElement value;
		public BrackettedExpressionContext _brackettedExpression;
		public BuiltInCallContext _builtInCall;
		public IRIrefOrFunctionContext _iRIrefOrFunction;
		public RDFLiteralContext _rDFLiteral;
		public NumericLiteralContext _numericLiteral;
		public IToken _BooleanLiteral;
		public VarContext _var;
		public RDFLiteralContext rDFLiteral() {
			return GetRuleContext<RDFLiteralContext>(0);
		}
		public BrackettedExpressionContext brackettedExpression() {
			return GetRuleContext<BrackettedExpressionContext>(0);
		}
		public BuiltInCallContext builtInCall() {
			return GetRuleContext<BuiltInCallContext>(0);
		}
		public IRIrefOrFunctionContext iRIrefOrFunction() {
			return GetRuleContext<IRIrefOrFunctionContext>(0);
		}
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public ITerminalNode BooleanLiteral() { return GetToken(sparqlParser.BooleanLiteral, 0); }
		public NumericLiteralContext numericLiteral() {
			return GetRuleContext<NumericLiteralContext>(0);
		}
		public PrimaryExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_primaryExpression; }
		public override void EnterRule(IParseTreeListener listener) {
			IsparqlListener typedListener = listener as IsparqlListener;
			if (typedListener != null) typedListener.EnterPrimaryExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsparqlListener typedListener = listener as IsparqlListener;
			if (typedListener != null) typedListener.ExitPrimaryExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsparqlVisitor<TResult> typedVisitor = visitor as IsparqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryExpressionContext primaryExpression() {
		PrimaryExpressionContext _localctx = new PrimaryExpressionContext(_ctx, State);
		EnterRule(_localctx, 108, RULE_primaryExpression);
		try {
			State = 682;
			switch (_input.La(1)) {
			case 43:
				EnterOuterAlt(_localctx, 1);
				{
				State = 662; _localctx._brackettedExpression = brackettedExpression();
				 _localctx.value = _localctx._brackettedExpression.value; 
				}
				break;
			case 2:
			case 3:
			case 9:
			case 12:
			case 17:
			case 18:
			case 20:
			case 21:
			case 22:
			case 23:
			case 26:
			case 27:
			case 28:
			case 30:
			case 32:
			case 33:
			case 44:
			case 45:
			case 46:
			case 47:
			case 49:
			case 50:
			case 51:
			case 60:
			case 61:
			case 65:
			case 70:
				EnterOuterAlt(_localctx, 2);
				{
				State = 665; _localctx._builtInCall = builtInCall();
				 _localctx.value = _localctx._builtInCall.value; 
				}
				break;
			case IRI_REF:
			case PREFIXED_NAME:
				EnterOuterAlt(_localctx, 3);
				{
				State = 668; _localctx._iRIrefOrFunction = iRIrefOrFunction();
				 _localctx.value = _localctx._iRIrefOrFunction.value; 
				}
				break;
			case String:
				EnterOuterAlt(_localctx, 4);
				{
				State = 671; _localctx._rDFLiteral = rDFLiteral();
				 _localctx.value = _localctx._rDFLiteral.value; 
				}
				break;
			case NumericLiteralPositive:
			case NumericLiteralNegative:
			case INTEGER:
			case DECIMAL:
			case DOUBLE:
				EnterOuterAlt(_localctx, 5);
				{
				State = 674; _localctx._numericLiteral = numericLiteral();
				 _localctx.value =  new XElement("numericLiteral", (_localctx._numericLiteral!=null?_input.GetText(_localctx._numericLiteral.start,_localctx._numericLiteral.stop):null)); 
				}
				break;
			case BooleanLiteral:
				EnterOuterAlt(_localctx, 6);
				{
				State = 677; _localctx._BooleanLiteral = Match(BooleanLiteral);
				 _localctx.value =  new XElement("BooleanLiteral", (_localctx._BooleanLiteral!=null?_localctx._BooleanLiteral.Text:null)); 
				}
				break;
			case VAR1:
			case VAR2:
				EnterOuterAlt(_localctx, 7);
				{
				State = 679; _localctx._var = var();
				 _localctx.value = _localctx._var.value; 
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BrackettedExpressionContext : ParserRuleContext {
		public XElement value;
		public ExpressionContext _expression;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public BrackettedExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_brackettedExpression; }
		public override void EnterRule(IParseTreeListener listener) {
			IsparqlListener typedListener = listener as IsparqlListener;
			if (typedListener != null) typedListener.EnterBrackettedExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsparqlListener typedListener = listener as IsparqlListener;
			if (typedListener != null) typedListener.ExitBrackettedExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsparqlVisitor<TResult> typedVisitor = visitor as IsparqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBrackettedExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BrackettedExpressionContext brackettedExpression() {
		BrackettedExpressionContext _localctx = new BrackettedExpressionContext(_ctx, State);
		EnterRule(_localctx, 110, RULE_brackettedExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 684; Match(43);
			State = 685; _localctx._expression = expression();
			State = 686; Match(19);
			 _localctx.value = _localctx._expression.value; 
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BuiltInCallContext : ParserRuleContext {
		public XElement value;
		public ExpressionContext _expression;
		public ExpressionContext l;
		public ExpressionContext r;
		public VarContext _var;
		public RegexExpressionContext _regexExpression;
		public RegexExpressionContext regexExpression() {
			return GetRuleContext<RegexExpressionContext>(0);
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public IReadOnlyList<ExpressionContext> expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public BuiltInCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_builtInCall; }
		public override void EnterRule(IParseTreeListener listener) {
			IsparqlListener typedListener = listener as IsparqlListener;
			if (typedListener != null) typedListener.EnterBuiltInCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsparqlListener typedListener = listener as IsparqlListener;
			if (typedListener != null) typedListener.ExitBuiltInCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsparqlVisitor<TResult> typedVisitor = visitor as IsparqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBuiltInCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BuiltInCallContext builtInCall() {
		BuiltInCallContext _localctx = new BuiltInCallContext(_ctx, State);
		EnterRule(_localctx, 112, RULE_builtInCall);
		int _la;
		try {
			State = 756;
			switch (_input.La(1)) {
			case 27:
			case 33:
			case 70:
				EnterOuterAlt(_localctx, 1);
				{
				State = 689;
				_la = _input.La(1);
				if ( !(((((_la - 27)) & ~0x3f) == 0 && ((1L << (_la - 27)) & ((1L << (27 - 27)) | (1L << (33 - 27)) | (1L << (70 - 27)))) != 0)) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				State = 690; Match(43);
				State = 691; _localctx._expression = expression();
				State = 692; Match(19);
				 _localctx.value = new XElement("STR", _localctx._expression.value);  
				}
				break;
			case 51:
			case 60:
			case 61:
				EnterOuterAlt(_localctx, 2);
				{
				State = 695;
				_la = _input.La(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << 51) | (1L << 60) | (1L << 61))) != 0)) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				State = 696; Match(43);
				State = 697; _localctx._expression = expression();
				State = 698; Match(19);
				 _localctx.value = new XElement("LANG", _localctx._expression.value);  
				}
				break;
			case 3:
			case 17:
			case 18:
			case 23:
			case 46:
				EnterOuterAlt(_localctx, 3);
				{
				State = 701;
				_la = _input.La(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << 3) | (1L << 17) | (1L << 18) | (1L << 23) | (1L << 46))) != 0)) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				State = 702; Match(43);
				State = 703; _localctx.l = expression();
				State = 704; Match(39);
				State = 705; _localctx.r = expression();
				State = 706; Match(19);
				 _localctx.value = new XElement("LANGMATCHES", _localctx.l.value, _localctx.r.value);  
				}
				break;
			case 26:
			case 28:
			case 30:
			case 44:
			case 45:
				EnterOuterAlt(_localctx, 4);
				{
				State = 709;
				_la = _input.La(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << 26) | (1L << 28) | (1L << 30) | (1L << 44) | (1L << 45))) != 0)) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				State = 710; Match(43);
				State = 711; _localctx._expression = expression();
				State = 712; Match(19);
				 _localctx.value = new XElement("DATATYPE", _localctx._expression.value);  
				}
				break;
			case 21:
			case 22:
			case 49:
				EnterOuterAlt(_localctx, 5);
				{
				State = 715;
				_la = _input.La(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << 21) | (1L << 22) | (1L << 49))) != 0)) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				State = 716; Match(43);
				State = 717; _localctx._var = var();
				State = 718; Match(19);
				 _localctx.value = new XElement("BOUND", _localctx._var.value);  
				}
				break;
			case 32:
				EnterOuterAlt(_localctx, 6);
				{
				State = 721; Match(32);
				State = 722; Match(43);
				State = 723; _localctx.l = expression();
				State = 724; Match(39);
				State = 725; _localctx.r = expression();
				State = 726; Match(19);
				 _localctx.value = new XElement("sameTerm", _localctx.l.value, _localctx.r.value);  
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 7);
				{
				State = 729; Match(9);
				State = 730; Match(43);
				State = 731; _localctx._expression = expression();
				State = 732; Match(19);
				 _localctx.value = new XElement("isIRI", _localctx._expression.value);  
				}
				break;
			case 47:
				EnterOuterAlt(_localctx, 8);
				{
				State = 735; Match(47);
				State = 736; Match(43);
				State = 737; _localctx._expression = expression();
				State = 738; Match(19);
				 _localctx.value = new XElement("isURI", _localctx._expression.value);  
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 9);
				{
				State = 741; Match(2);
				State = 742; Match(43);
				State = 743; _localctx._expression = expression();
				State = 744; Match(19);
				 _localctx.value = new XElement("isBLANK", _localctx._expression.value);  
				}
				break;
			case 50:
				EnterOuterAlt(_localctx, 10);
				{
				State = 747; Match(50);
				State = 748; Match(43);
				State = 749; _localctx._expression = expression();
				State = 750; Match(19);
				 _localctx.value = new XElement("isLITERAL", _localctx._expression.value);  
				}
				break;
			case 12:
			case 20:
			case 65:
				EnterOuterAlt(_localctx, 11);
				{
				State = 753; _localctx._regexExpression = regexExpression();
				 _localctx.value = _localctx._regexExpression.value;  
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RegexExpressionContext : ParserRuleContext {
		public XElement value;
		public ExpressionContext v;
		public ExpressionContext rex;
		public ExpressionContext extraParam;
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public IReadOnlyList<ExpressionContext> expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public RegexExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_regexExpression; }
		public override void EnterRule(IParseTreeListener listener) {
			IsparqlListener typedListener = listener as IsparqlListener;
			if (typedListener != null) typedListener.EnterRegexExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsparqlListener typedListener = listener as IsparqlListener;
			if (typedListener != null) typedListener.ExitRegexExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsparqlVisitor<TResult> typedVisitor = visitor as IsparqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRegexExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RegexExpressionContext regexExpression() {
		RegexExpressionContext _localctx = new RegexExpressionContext(_ctx, State);
		EnterRule(_localctx, 114, RULE_regexExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 758;
			_la = _input.La(1);
			if ( !(((((_la - 12)) & ~0x3f) == 0 && ((1L << (_la - 12)) & ((1L << (12 - 12)) | (1L << (20 - 12)) | (1L << (65 - 12)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			State = 759; Match(43);
			State = 760; _localctx.v = expression();
			State = 761; Match(39);
			State = 762; _localctx.rex = expression();
			State = 765;
			_la = _input.La(1);
			if (_la==39) {
				{
				State = 763; Match(39);
				State = 764; _localctx.extraParam = expression();
				}
			}

			State = 767; Match(19);
			_localctx.value = new XElement("regex", _localctx.v.value, _localctx.rex.value);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IRIrefOrFunctionContext : ParserRuleContext {
		public XElement value;
		public IRIrefContext _iRIref;
		public ArgListContext _argList;
		public IRIrefContext iRIref() {
			return GetRuleContext<IRIrefContext>(0);
		}
		public ArgListContext argList() {
			return GetRuleContext<ArgListContext>(0);
		}
		public IRIrefOrFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_iRIrefOrFunction; }
		public override void EnterRule(IParseTreeListener listener) {
			IsparqlListener typedListener = listener as IsparqlListener;
			if (typedListener != null) typedListener.EnterIRIrefOrFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsparqlListener typedListener = listener as IsparqlListener;
			if (typedListener != null) typedListener.ExitIRIrefOrFunction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsparqlVisitor<TResult> typedVisitor = visitor as IsparqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIRIrefOrFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IRIrefOrFunctionContext iRIrefOrFunction() {
		IRIrefOrFunctionContext _localctx = new IRIrefOrFunctionContext(_ctx, State);
		EnterRule(_localctx, 116, RULE_iRIrefOrFunction);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 770; _localctx._iRIref = iRIref();
			_localctx.value = _localctx._iRIref.value;
			State = 775;
			_la = _input.La(1);
			if (_la==43 || _la==NIL) {
				{
				State = 772; _localctx._argList = argList();
				 _localctx.value = new XElement("iRIrefOrFunction", new XElement("f", _localctx.value), new XElement("argList", _localctx._argList.value));  
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RDFLiteralContext : ParserRuleContext {
		public XElement value;
		public IToken _String;
		public IToken _LANGTAG;
		public IRIrefContext _iRIref;
		public ITerminalNode String() { return GetToken(sparqlParser.String, 0); }
		public IRIrefContext iRIref() {
			return GetRuleContext<IRIrefContext>(0);
		}
		public ITerminalNode LANGTAG() { return GetToken(sparqlParser.LANGTAG, 0); }
		public RDFLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_rDFLiteral; }
		public override void EnterRule(IParseTreeListener listener) {
			IsparqlListener typedListener = listener as IsparqlListener;
			if (typedListener != null) typedListener.EnterRDFLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsparqlListener typedListener = listener as IsparqlListener;
			if (typedListener != null) typedListener.ExitRDFLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsparqlVisitor<TResult> typedVisitor = visitor as IsparqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRDFLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RDFLiteralContext rDFLiteral() {
		RDFLiteralContext _localctx = new RDFLiteralContext(_ctx, State);
		EnterRule(_localctx, 118, RULE_rDFLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 777; _localctx._String = Match(String);
			_localctx.value =  new XElement("RDFLiteral",  (_localctx._String!=null?_localctx._String.Text:null));
			State = 785;
			switch (_input.La(1)) {
			case LANGTAG:
				{
				State = 779; _localctx._LANGTAG = Match(LANGTAG);
				 _localctx.value.Add(new XElement("lang", (_localctx._LANGTAG!=null?_localctx._LANGTAG.Text:null)));
				}
				break;
			case 14:
				{
				{
				State = 781; Match(14);
				State = 782; _localctx._iRIref = iRIref();
				 _localctx.value.Add(new XElement("type", _localctx._iRIref.value)); 
				}
				}
				break;
			case 4:
			case 6:
			case 7:
			case 8:
			case 10:
			case 11:
			case 13:
			case 19:
			case 25:
			case 36:
			case 37:
			case 39:
			case 42:
			case 43:
			case 48:
			case 53:
			case 54:
			case 55:
			case 57:
			case 58:
			case 62:
			case 63:
			case 64:
			case 68:
			case 69:
			case NumericLiteralPositive:
			case NumericLiteralNegative:
			case BooleanLiteral:
			case String:
			case BlankNode:
			case IRI_REF:
			case PREFIXED_NAME:
			case VAR1:
			case VAR2:
			case INTEGER:
			case DECIMAL:
			case DOUBLE:
			case NIL:
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IRIrefContext : ParserRuleContext {
		public XElement value;
		public IToken _IRI_REF;
		public IToken _PREFIXED_NAME;
		public ITerminalNode IRI_REF() { return GetToken(sparqlParser.IRI_REF, 0); }
		public ITerminalNode PREFIXED_NAME() { return GetToken(sparqlParser.PREFIXED_NAME, 0); }
		public IRIrefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_iRIref; }
		public override void EnterRule(IParseTreeListener listener) {
			IsparqlListener typedListener = listener as IsparqlListener;
			if (typedListener != null) typedListener.EnterIRIref(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsparqlListener typedListener = listener as IsparqlListener;
			if (typedListener != null) typedListener.ExitIRIref(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsparqlVisitor<TResult> typedVisitor = visitor as IsparqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIRIref(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IRIrefContext iRIref() {
		IRIrefContext _localctx = new IRIrefContext(_ctx, State);
		EnterRule(_localctx, 120, RULE_iRIref);
		try {
			State = 791;
			switch (_input.La(1)) {
			case IRI_REF:
				EnterOuterAlt(_localctx, 1);
				{
				State = 787; _localctx._IRI_REF = Match(IRI_REF);
					 _localctx.value =  new XElement("IRI_REF", (_localctx._IRI_REF!=null?_localctx._IRI_REF.Text:null)); 
				}
				break;
			case PREFIXED_NAME:
				EnterOuterAlt(_localctx, 2);
				{
				State = 789; _localctx._PREFIXED_NAME = Match(PREFIXED_NAME);
					 _localctx.value =  new XElement("PREFIXED_NAME", (_localctx._PREFIXED_NAME!=null?_localctx._PREFIXED_NAME.Text:null)); 
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumericLiteralContext : ParserRuleContext {
		public ITerminalNode NumericLiteralPositive() { return GetToken(sparqlParser.NumericLiteralPositive, 0); }
		public NumericLiteralUnsignedContext numericLiteralUnsigned() {
			return GetRuleContext<NumericLiteralUnsignedContext>(0);
		}
		public ITerminalNode NumericLiteralNegative() { return GetToken(sparqlParser.NumericLiteralNegative, 0); }
		public NumericLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_numericLiteral; }
		public override void EnterRule(IParseTreeListener listener) {
			IsparqlListener typedListener = listener as IsparqlListener;
			if (typedListener != null) typedListener.EnterNumericLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsparqlListener typedListener = listener as IsparqlListener;
			if (typedListener != null) typedListener.ExitNumericLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsparqlVisitor<TResult> typedVisitor = visitor as IsparqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumericLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumericLiteralContext numericLiteral() {
		NumericLiteralContext _localctx = new NumericLiteralContext(_ctx, State);
		EnterRule(_localctx, 122, RULE_numericLiteral);
		try {
			State = 796;
			switch (_input.La(1)) {
			case INTEGER:
			case DECIMAL:
			case DOUBLE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 793; numericLiteralUnsigned();
				}
				break;
			case NumericLiteralPositive:
				EnterOuterAlt(_localctx, 2);
				{
				State = 794; Match(NumericLiteralPositive);
				}
				break;
			case NumericLiteralNegative:
				EnterOuterAlt(_localctx, 3);
				{
				State = 795; Match(NumericLiteralNegative);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumericLiteralUnsignedContext : ParserRuleContext {
		public ITerminalNode DOUBLE() { return GetToken(sparqlParser.DOUBLE, 0); }
		public ITerminalNode INTEGER() { return GetToken(sparqlParser.INTEGER, 0); }
		public ITerminalNode DECIMAL() { return GetToken(sparqlParser.DECIMAL, 0); }
		public NumericLiteralUnsignedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_numericLiteralUnsigned; }
		public override void EnterRule(IParseTreeListener listener) {
			IsparqlListener typedListener = listener as IsparqlListener;
			if (typedListener != null) typedListener.EnterNumericLiteralUnsigned(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsparqlListener typedListener = listener as IsparqlListener;
			if (typedListener != null) typedListener.ExitNumericLiteralUnsigned(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsparqlVisitor<TResult> typedVisitor = visitor as IsparqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumericLiteralUnsigned(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumericLiteralUnsignedContext numericLiteralUnsigned() {
		NumericLiteralUnsignedContext _localctx = new NumericLiteralUnsignedContext(_ctx, State);
		EnterRule(_localctx, 124, RULE_numericLiteralUnsigned);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 798;
			_la = _input.La(1);
			if ( !(((((_la - 86)) & ~0x3f) == 0 && ((1L << (_la - 86)) & ((1L << (INTEGER - 86)) | (1L << (DECIMAL - 86)) | (1L << (DOUBLE - 86)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3o\x323\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t"+
		"\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t"+
		"\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x4(\t(\x4)\t)\x4*\t"+
		"*\x4+\t+\x4,\t,\x4-\t-\x4.\t.\x4/\t/\x4\x30\t\x30\x4\x31\t\x31\x4\x32"+
		"\t\x32\x4\x33\t\x33\x4\x34\t\x34\x4\x35\t\x35\x4\x36\t\x36\x4\x37\t\x37"+
		"\x4\x38\t\x38\x4\x39\t\x39\x4:\t:\x4;\t;\x4<\t<\x4=\t=\x4>\t>\x4?\t?\x4"+
		"@\t@\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x5\x2\x86\n\x2\x3\x2\x3\x2\x3\x3\x5"+
		"\x3\x8B\n\x3\x3\x3\a\x3\x8E\n\x3\f\x3\xE\x3\x91\v\x3\x3\x4\x3\x4\x3\x4"+
		"\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x5"+
		"\x6\xA1\n\x6\x3\x6\x3\x6\x3\x6\x6\x6\xA6\n\x6\r\x6\xE\x6\xA7\x3\x6\x3"+
		"\x6\x5\x6\xAC\n\x6\x3\x6\a\x6\xAF\n\x6\f\x6\xE\x6\xB2\v\x6\x3\x6\x3\x6"+
		"\x3\x6\x3\a\x3\a\x3\a\a\a\xBA\n\a\f\a\xE\a\xBD\v\a\x3\a\x3\a\x3\a\x3\a"+
		"\x3\b\x3\b\x3\b\x3\b\x3\b\x6\b\xC8\n\b\r\b\xE\b\xC9\x3\b\x3\b\x5\b\xCE"+
		"\n\b\x3\b\a\b\xD1\n\b\f\b\xE\b\xD4\v\b\x3\b\x5\b\xD7\n\b\x3\b\x3\b\x3"+
		"\t\x3\t\a\t\xDD\n\t\f\t\xE\t\xE0\v\t\x3\t\x3\t\x3\n\x3\n\x3\n\x3\n\x5"+
		"\n\xE8\n\n\x3\v\x3\v\x3\f\x3\f\x3\f\x3\r\x3\r\x3\r\x3\xE\x5\xE\xF3\n\xE"+
		"\x3\xE\x3\xE\x3\xE\x3\xF\x3\xF\x3\xF\x5\xF\xFB\n\xF\x3\xF\x3\xF\x3\xF"+
		"\x5\xF\x100\n\xF\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x5\x10\x107\n\x10"+
		"\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x5\x10\x10E\n\x10\x5\x10\x110\n\x10"+
		"\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x6\x11\x118\n\x11\r\x11\xE"+
		"\x11\x119\x3\x12\x3\x12\x3\x12\x3\x12\x5\x12\x120\n\x12\x3\x12\x3\x12"+
		"\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x5\x12\x12B\n\x12\x5"+
		"\x12\x12D\n\x12\x3\x13\x3\x13\x3\x13\x3\x13\x3\x14\x3\x14\x3\x14\x3\x14"+
		"\x3\x15\x3\x15\x3\x15\x3\x15\x5\x15\x13B\n\x15\x3\x15\x3\x15\x3\x15\x3"+
		"\x15\x3\x15\x3\x15\x5\x15\x143\n\x15\x3\x15\x5\x15\x146\n\x15\x3\x15\x3"+
		"\x15\x3\x15\x5\x15\x14B\n\x15\a\x15\x14D\n\x15\f\x15\xE\x15\x150\v\x15"+
		"\x3\x15\x3\x15\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\x5\x16\x15A\n"+
		"\x16\x5\x16\x15C\n\x16\x3\x17\x3\x17\x3\x17\x3\x17\x3\x17\x3\x17\x3\x17"+
		"\x3\x17\x3\x17\x5\x17\x167\n\x17\x3\x18\x3\x18\x3\x18\x3\x18\x3\x19\x3"+
		"\x19\x3\x19\x3\x19\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\a\x1A\x177"+
		"\n\x1A\f\x1A\xE\x1A\x17A\v\x1A\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1C\x3\x1C"+
		"\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x5\x1C\x189\n\x1C\x3"+
		"\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3"+
		"\x1E\x3\x1E\x3\x1E\a\x1E\x198\n\x1E\f\x1E\xE\x1E\x19B\v\x1E\x3\x1E\x3"+
		"\x1E\x5\x1E\x19F\n\x1E\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x5\x1F\x1A5\n\x1F\x3"+
		"\x1F\x3\x1F\x3 \x3 \x3 \x3 \x3 \x3 \x5 \x1AF\n \x5 \x1B1\n \x3!\x3!\x3"+
		"!\x3!\x3!\x3!\x3!\x3!\x5!\x1BB\n!\x3\"\x3\"\x3\"\x3\"\x3\"\x3\"\x3\"\x3"+
		"\"\x5\"\x1C5\n\"\a\"\x1C7\n\"\f\"\xE\"\x1CA\v\"\x3#\x3#\x3#\x5#\x1CF\n"+
		"#\x3$\x3$\x3$\x3$\x3$\x3$\a$\x1D7\n$\f$\xE$\x1DA\v$\x3%\x3%\x3%\x3&\x3"+
		"&\x3&\x3&\x3&\x5&\x1E4\n&\x3\'\x3\'\x3\'\x3\'\x3\'\x3\'\x5\'\x1EC\n\'"+
		"\x3(\x3(\x3(\x3(\x3(\x3)\x3)\x3)\x3)\x3)\x6)\x1F8\n)\r)\xE)\x1F9\x3)\x3"+
		")\x3*\x3*\x3*\x3*\x5*\x202\n*\x3+\x3+\x3+\x3+\x3+\x3+\x5+\x20A\n+\x3,"+
		"\x3,\x3,\x3,\x3,\x3,\x5,\x212\n,\x3-\x3-\x3-\x3-\x5-\x218\n-\x3.\x3.\x3"+
		".\x3.\x3.\x3.\x3.\x3.\x3.\x3.\x3.\x3.\x3.\x3.\x3.\x5.\x229\n.\x3/\x3/"+
		"\x3/\x3\x30\x3\x30\x3\x30\x3\x30\x3\x30\x3\x30\a\x30\x234\n\x30\f\x30"+
		"\xE\x30\x237\v\x30\x3\x31\x3\x31\x3\x31\x3\x31\x3\x31\x3\x31\a\x31\x23F"+
		"\n\x31\f\x31\xE\x31\x242\v\x31\x3\x32\x3\x32\x3\x32\x3\x33\x3\x33\x3\x33"+
		"\x3\x33\x3\x33\x3\x33\x3\x33\x3\x33\x3\x33\x3\x33\x3\x33\x3\x33\x3\x33"+
		"\x3\x33\x3\x33\x3\x33\x3\x33\x3\x33\x3\x33\x3\x33\x3\x33\x3\x33\x3\x33"+
		"\x3\x33\x3\x33\x3\x33\x5\x33\x261\n\x33\x3\x34\x3\x34\x3\x34\x3\x35\x3"+
		"\x35\x3\x35\x3\x35\x3\x35\x3\x35\x3\x35\x3\x35\x3\x35\x3\x35\x3\x35\x3"+
		"\x35\x3\x35\x3\x35\a\x35\x274\n\x35\f\x35\xE\x35\x277\v\x35\x3\x36\x3"+
		"\x36\x3\x36\x3\x36\x3\x36\x3\x36\x3\x36\x3\x36\x3\x36\x3\x36\a\x36\x283"+
		"\n\x36\f\x36\xE\x36\x286\v\x36\x3\x37\x3\x37\x3\x37\x3\x37\x3\x37\x3\x37"+
		"\x3\x37\x3\x37\x3\x37\x3\x37\x3\x37\x3\x37\x3\x37\x3\x37\x3\x37\x5\x37"+
		"\x297\n\x37\x3\x38\x3\x38\x3\x38\x3\x38\x3\x38\x3\x38\x3\x38\x3\x38\x3"+
		"\x38\x3\x38\x3\x38\x3\x38\x3\x38\x3\x38\x3\x38\x3\x38\x3\x38\x3\x38\x3"+
		"\x38\x3\x38\x5\x38\x2AD\n\x38\x3\x39\x3\x39\x3\x39\x3\x39\x3\x39\x3:\x3"+
		":\x3:\x3:\x3:\x3:\x3:\x3:\x3:\x3:\x3:\x3:\x3:\x3:\x3:\x3:\x3:\x3:\x3:"+
		"\x3:\x3:\x3:\x3:\x3:\x3:\x3:\x3:\x3:\x3:\x3:\x3:\x3:\x3:\x3:\x3:\x3:\x3"+
		":\x3:\x3:\x3:\x3:\x3:\x3:\x3:\x3:\x3:\x3:\x3:\x3:\x3:\x3:\x3:\x3:\x3:"+
		"\x3:\x3:\x3:\x3:\x3:\x3:\x3:\x3:\x3:\x3:\x3:\x3:\x3:\x5:\x2F7\n:\x3;\x3"+
		";\x3;\x3;\x3;\x3;\x3;\x5;\x300\n;\x3;\x3;\x3;\x3<\x3<\x3<\x3<\x3<\x5<"+
		"\x30A\n<\x3=\x3=\x3=\x3=\x3=\x3=\x3=\x3=\x5=\x314\n=\x3>\x3>\x3>\x3>\x5"+
		">\x31A\n>\x3?\x3?\x3?\x5?\x31F\n?\x3@\x3@\x3@\x2\x2\x2\x41\x2\x2\x4\x2"+
		"\x6\x2\b\x2\n\x2\f\x2\xE\x2\x10\x2\x12\x2\x14\x2\x16\x2\x18\x2\x1A\x2"+
		"\x1C\x2\x1E\x2 \x2\"\x2$\x2&\x2(\x2*\x2,\x2.\x2\x30\x2\x32\x2\x34\x2\x36"+
		"\x2\x38\x2:\x2<\x2>\x2@\x2\x42\x2\x44\x2\x46\x2H\x2J\x2L\x2N\x2P\x2R\x2"+
		"T\x2V\x2X\x2Z\x2\\\x2^\x2`\x2\x62\x2\x64\x2\x66\x2h\x2j\x2l\x2n\x2p\x2"+
		"r\x2t\x2v\x2x\x2z\x2|\x2~\x2\x2\t\x5\x2\x1D\x1D##HH\x4\x2\x35\x35>?\x6"+
		"\x2\x5\x5\x13\x14\x19\x19\x30\x30\x6\x2\x1C\x1C\x1E\x1E  ./\x4\x2\x17"+
		"\x18\x33\x33\x5\x2\xE\xE\x16\x16\x43\x43\x3\x2XZ\x348\x2\x80\x3\x2\x2"+
		"\x2\x4\x8A\x3\x2\x2\x2\x6\x92\x3\x2\x2\x2\b\x95\x3\x2\x2\x2\n\x9A\x3\x2"+
		"\x2\x2\f\xB6\x3\x2\x2\x2\xE\xC2\x3\x2\x2\x2\x10\xDA\x3\x2\x2\x2\x12\xE3"+
		"\x3\x2\x2\x2\x14\xE9\x3\x2\x2\x2\x16\xEB\x3\x2\x2\x2\x18\xEE\x3\x2\x2"+
		"\x2\x1A\xF2\x3\x2\x2\x2\x1C\xFA\x3\x2\x2\x2\x1E\x10F\x3\x2\x2\x2 \x111"+
		"\x3\x2\x2\x2\"\x12C\x3\x2\x2\x2$\x12E\x3\x2\x2\x2&\x132\x3\x2\x2\x2(\x136"+
		"\x3\x2\x2\x2*\x153\x3\x2\x2\x2,\x166\x3\x2\x2\x2.\x168\x3\x2\x2\x2\x30"+
		"\x16C\x3\x2\x2\x2\x32\x170\x3\x2\x2\x2\x34\x17B\x3\x2\x2\x2\x36\x188\x3"+
		"\x2\x2\x2\x38\x18A\x3\x2\x2\x2:\x19E\x3\x2\x2\x2<\x1A0\x3\x2\x2\x2>\x1A8"+
		"\x3\x2\x2\x2@\x1BA\x3\x2\x2\x2\x42\x1BC\x3\x2\x2\x2\x44\x1CE\x3\x2\x2"+
		"\x2\x46\x1D0\x3\x2\x2\x2H\x1DB\x3\x2\x2\x2J\x1E3\x3\x2\x2\x2L\x1EB\x3"+
		"\x2\x2\x2N\x1ED\x3\x2\x2\x2P\x1F2\x3\x2\x2\x2R\x201\x3\x2\x2\x2T\x209"+
		"\x3\x2\x2\x2V\x211\x3\x2\x2\x2X\x217\x3\x2\x2\x2Z\x228\x3\x2\x2\x2\\\x22A"+
		"\x3\x2\x2\x2^\x22D\x3\x2\x2\x2`\x238\x3\x2\x2\x2\x62\x243\x3\x2\x2\x2"+
		"\x64\x246\x3\x2\x2\x2\x66\x262\x3\x2\x2\x2h\x265\x3\x2\x2\x2j\x278\x3"+
		"\x2\x2\x2l\x296\x3\x2\x2\x2n\x2AC\x3\x2\x2\x2p\x2AE\x3\x2\x2\x2r\x2F6"+
		"\x3\x2\x2\x2t\x2F8\x3\x2\x2\x2v\x304\x3\x2\x2\x2x\x30B\x3\x2\x2\x2z\x319"+
		"\x3\x2\x2\x2|\x31E\x3\x2\x2\x2~\x320\x3\x2\x2\x2\x80\x85\x5\x4\x3\x2\x81"+
		"\x86\x5\n\x6\x2\x82\x86\x5\f\a\x2\x83\x86\x5\xE\b\x2\x84\x86\x5\x10\t"+
		"\x2\x85\x81\x3\x2\x2\x2\x85\x82\x3\x2\x2\x2\x85\x83\x3\x2\x2\x2\x85\x84"+
		"\x3\x2\x2\x2\x86\x87\x3\x2\x2\x2\x87\x88\b\x2\x1\x2\x88\x3\x3\x2\x2\x2"+
		"\x89\x8B\x5\x6\x4\x2\x8A\x89\x3\x2\x2\x2\x8A\x8B\x3\x2\x2\x2\x8B\x8F\x3"+
		"\x2\x2\x2\x8C\x8E\x5\b\x5\x2\x8D\x8C\x3\x2\x2\x2\x8E\x91\x3\x2\x2\x2\x8F"+
		"\x8D\x3\x2\x2\x2\x8F\x90\x3\x2\x2\x2\x90\x5\x3\x2\x2\x2\x91\x8F\x3\x2"+
		"\x2\x2\x92\x93\a\x1F\x2\x2\x93\x94\aP\x2\x2\x94\a\x3\x2\x2\x2\x95\x96"+
		"\a\x12\x2\x2\x96\x97\aQ\x2\x2\x97\x98\aP\x2\x2\x98\x99\b\x5\x1\x2\x99"+
		"\t\x3\x2\x2\x2\x9A\x9B\a%\x2\x2\x9B\xA0\b\x6\x1\x2\x9C\x9D\a\x3\x2\x2"+
		"\x9D\xA1\b\x6\x1\x2\x9E\x9F\a:\x2\x2\x9F\xA1\b\x6\x1\x2\xA0\x9C\x3\x2"+
		"\x2\x2\xA0\x9E\x3\x2\x2\x2\xA0\xA1\x3\x2\x2\x2\xA1\xAB\x3\x2\x2\x2\xA2"+
		"\xA3\x5X-\x2\xA3\xA4\b\x6\x1\x2\xA4\xA6\x3\x2\x2\x2\xA5\xA2\x3\x2\x2\x2"+
		"\xA6\xA7\x3\x2\x2\x2\xA7\xA5\x3\x2\x2\x2\xA7\xA8\x3\x2\x2\x2\xA8\xAC\x3"+
		"\x2\x2\x2\xA9\xAA\a\b\x2\x2\xAA\xAC\b\x6\x1\x2\xAB\xA5\x3\x2\x2\x2\xAB"+
		"\xA9\x3\x2\x2\x2\xAC\xB0\x3\x2\x2\x2\xAD\xAF\x5\x12\n\x2\xAE\xAD\x3\x2"+
		"\x2\x2\xAF\xB2\x3\x2\x2\x2\xB0\xAE\x3\x2\x2\x2\xB0\xB1\x3\x2\x2\x2\xB1"+
		"\xB3\x3\x2\x2\x2\xB2\xB0\x3\x2\x2\x2\xB3\xB4\x5\x1A\xE\x2\xB4\xB5\x5\x1C"+
		"\xF\x2\xB5\v\x3\x2\x2\x2\xB6\xB7\a=\x2\x2\xB7\xBB\x5<\x1F\x2\xB8\xBA\x5"+
		"\x12\n\x2\xB9\xB8\x3\x2\x2\x2\xBA\xBD\x3\x2\x2\x2\xBB\xB9\x3\x2\x2\x2"+
		"\xBB\xBC\x3\x2\x2\x2\xBC\xBE\x3\x2\x2\x2\xBD\xBB\x3\x2\x2\x2\xBE\xBF\x5"+
		"\x1A\xE\x2\xBF\xC0\x5\x1C\xF\x2\xC0\xC1\b\a\x1\x2\xC1\r\x3\x2\x2\x2\xC2"+
		"\xC3\a\x44\x2\x2\xC3\xCD\b\b\x1\x2\xC4\xC5\x5V,\x2\xC5\xC6\b\b\x1\x2\xC6"+
		"\xC8\x3\x2\x2\x2\xC7\xC4\x3\x2\x2\x2\xC8\xC9\x3\x2\x2\x2\xC9\xC7\x3\x2"+
		"\x2\x2\xC9\xCA\x3\x2\x2\x2\xCA\xCE\x3\x2\x2\x2\xCB\xCC\a\b\x2\x2\xCC\xCE"+
		"\b\b\x1\x2\xCD\xC7\x3\x2\x2\x2\xCD\xCB\x3\x2\x2\x2\xCE\xD2\x3\x2\x2\x2"+
		"\xCF\xD1\x5\x12\n\x2\xD0\xCF\x3\x2\x2\x2\xD1\xD4\x3\x2\x2\x2\xD2\xD0\x3"+
		"\x2\x2\x2\xD2\xD3\x3\x2\x2\x2\xD3\xD6\x3\x2\x2\x2\xD4\xD2\x3\x2\x2\x2"+
		"\xD5\xD7\x5\x1A\xE\x2\xD6\xD5\x3\x2\x2\x2\xD6\xD7\x3\x2\x2\x2\xD7\xD8"+
		"\x3\x2\x2\x2\xD8\xD9\x5\x1C\xF\x2\xD9\xF\x3\x2\x2\x2\xDA\xDE\a\x36\x2"+
		"\x2\xDB\xDD\x5\x12\n\x2\xDC\xDB\x3\x2\x2\x2\xDD\xE0\x3\x2\x2\x2\xDE\xDC"+
		"\x3\x2\x2\x2\xDE\xDF\x3\x2\x2\x2\xDF\xE1\x3\x2\x2\x2\xE0\xDE\x3\x2\x2"+
		"\x2\xE1\xE2\x5\x1A\xE\x2\xE2\x11\x3\x2\x2\x2\xE3\xE4\a!\x2\x2\xE4\xE7"+
		"\b\n\x1\x2\xE5\xE8\x5\x14\v\x2\xE6\xE8\x5\x16\f\x2\xE7\xE5\x3\x2\x2\x2"+
		"\xE7\xE6\x3\x2\x2\x2\xE8\x13\x3\x2\x2\x2\xE9\xEA\x5\x18\r\x2\xEA\x15\x3"+
		"\x2\x2\x2\xEB\xEC\aJ\x2\x2\xEC\xED\x5\x18\r\x2\xED\x17\x3\x2\x2\x2\xEE"+
		"\xEF\x5z>\x2\xEF\xF0\b\r\x1\x2\xF0\x19\x3\x2\x2\x2\xF1\xF3\a\a\x2\x2\xF2"+
		"\xF1\x3\x2\x2\x2\xF2\xF3\x3\x2\x2\x2\xF3\xF4\x3\x2\x2\x2\xF4\xF5\x5(\x15"+
		"\x2\xF5\xF6\b\xE\x1\x2\xF6\x1B\x3\x2\x2\x2\xF7\xF8\x5 \x11\x2\xF8\xF9"+
		"\b\xF\x1\x2\xF9\xFB\x3\x2\x2\x2\xFA\xF7\x3\x2\x2\x2\xFA\xFB\x3\x2\x2\x2"+
		"\xFB\xFF\x3\x2\x2\x2\xFC\xFD\x5\x1E\x10\x2\xFD\xFE\b\xF\x1\x2\xFE\x100"+
		"\x3\x2\x2\x2\xFF\xFC\x3\x2\x2\x2\xFF\x100\x3\x2\x2\x2\x100\x1D\x3\x2\x2"+
		"\x2\x101\x102\x5$\x13\x2\x102\x106\b\x10\x1\x2\x103\x104\x5&\x14\x2\x104"+
		"\x105\b\x10\x1\x2\x105\x107\x3\x2\x2\x2\x106\x103\x3\x2\x2\x2\x106\x107"+
		"\x3\x2\x2\x2\x107\x110\x3\x2\x2\x2\x108\x109\x5&\x14\x2\x109\x10D\b\x10"+
		"\x1\x2\x10A\x10B\x5$\x13\x2\x10B\x10C\b\x10\x1\x2\x10C\x10E\x3\x2\x2\x2"+
		"\x10D\x10A\x3\x2\x2\x2\x10D\x10E\x3\x2\x2\x2\x10E\x110\x3\x2\x2\x2\x10F"+
		"\x101\x3\x2\x2\x2\x10F\x108\x3\x2\x2\x2\x110\x1F\x3\x2\x2\x2\x111\x112"+
		"\a\x11\x2\x2\x112\x113\a(\x2\x2\x113\x117\b\x11\x1\x2\x114\x115\x5\"\x12"+
		"\x2\x115\x116\b\x11\x1\x2\x116\x118\x3\x2\x2\x2\x117\x114\x3\x2\x2\x2"+
		"\x118\x119\x3\x2\x2\x2\x119\x117\x3\x2\x2\x2\x119\x11A\x3\x2\x2\x2\x11A"+
		"!\x3\x2\x2\x2\x11B\x11F\b\x12\x1\x2\x11C\x120\a+\x2\x2\x11D\x11E\a\x1A"+
		"\x2\x2\x11E\x120\b\x12\x1\x2\x11F\x11C\x3\x2\x2\x2\x11F\x11D\x3\x2\x2"+
		"\x2\x120\x121\x3\x2\x2\x2\x121\x122\x5p\x39\x2\x122\x123\b\x12\x1\x2\x123"+
		"\x12D\x3\x2\x2\x2\x124\x125\x5\x36\x1C\x2\x125\x126\b\x12\x1\x2\x126\x12B"+
		"\x3\x2\x2\x2\x127\x128\x5X-\x2\x128\x129\b\x12\x1\x2\x129\x12B\x3\x2\x2"+
		"\x2\x12A\x124\x3\x2\x2\x2\x12A\x127\x3\x2\x2\x2\x12B\x12D\x3\x2\x2\x2"+
		"\x12C\x11B\x3\x2\x2\x2\x12C\x12A\x3\x2\x2\x2\x12D#\x3\x2\x2\x2\x12E\x12F"+
		"\a\x45\x2\x2\x12F\x130\aX\x2\x2\x130\x131\b\x13\x1\x2\x131%\x3\x2\x2\x2"+
		"\x132\x133\a*\x2\x2\x133\x134\aX\x2\x2\x134\x135\b\x14\x1\x2\x135\'\x3"+
		"\x2\x2\x2\x136\x13A\a\x32\x2\x2\x137\x138\x5*\x16\x2\x138\x139\b\x15\x1"+
		"\x2\x139\x13B\x3\x2\x2\x2\x13A\x137\x3\x2\x2\x2\x13A\x13B\x3\x2\x2\x2"+
		"\x13B\x14E\x3\x2\x2\x2\x13C\x13D\x5,\x17\x2\x13D\x13E\b\x15\x1\x2\x13E"+
		"\x143\x3\x2\x2\x2\x13F\x140\x5\x34\x1B\x2\x140\x141\b\x15\x1\x2\x141\x143"+
		"\x3\x2\x2\x2\x142\x13C\x3\x2\x2\x2\x142\x13F\x3\x2\x2\x2\x143\x145\x3"+
		"\x2\x2\x2\x144\x146\a\x39\x2\x2\x145\x144\x3\x2\x2\x2\x145\x146\x3\x2"+
		"\x2\x2\x146\x14A\x3\x2\x2\x2\x147\x148\x5*\x16\x2\x148\x149\b\x15\x1\x2"+
		"\x149\x14B\x3\x2\x2\x2\x14A\x147\x3\x2\x2\x2\x14A\x14B\x3\x2\x2\x2\x14B"+
		"\x14D\x3\x2\x2\x2\x14C\x142\x3\x2\x2\x2\x14D\x150\x3\x2\x2\x2\x14E\x14C"+
		"\x3\x2\x2\x2\x14E\x14F\x3\x2\x2\x2\x14F\x151\x3\x2\x2\x2\x150\x14E\x3"+
		"\x2\x2\x2\x151\x152\a\xF\x2\x2\x152)\x3\x2\x2\x2\x153\x154\x5@!\x2\x154"+
		"\x15B\b\x16\x1\x2\x155\x159\a\x39\x2\x2\x156\x157\x5*\x16\x2\x157\x158"+
		"\b\x16\x1\x2\x158\x15A\x3\x2\x2\x2\x159\x156\x3\x2\x2\x2\x159\x15A\x3"+
		"\x2\x2\x2\x15A\x15C\x3\x2\x2\x2\x15B\x155\x3\x2\x2\x2\x15B\x15C\x3\x2"+
		"\x2\x2\x15C+\x3\x2\x2\x2\x15D\x15E\x5.\x18\x2\x15E\x15F\b\x17\x1\x2\x15F"+
		"\x167\x3\x2\x2\x2\x160\x161\x5\x32\x1A\x2\x161\x162\b\x17\x1\x2\x162\x167"+
		"\x3\x2\x2\x2\x163\x164\x5\x30\x19\x2\x164\x165\b\x17\x1\x2\x165\x167\x3"+
		"\x2\x2\x2\x166\x15D\x3\x2\x2\x2\x166\x160\x3\x2\x2\x2\x166\x163\x3\x2"+
		"\x2\x2\x167-\x3\x2\x2\x2\x168\x169\a\'\x2\x2\x169\x16A\x5(\x15\x2\x16A"+
		"\x16B\b\x18\x1\x2\x16B/\x3\x2\x2\x2\x16C\x16D\a\x37\x2\x2\x16D\x16E\x5"+
		"V,\x2\x16E\x16F\x5(\x15\x2\x16F\x31\x3\x2\x2\x2\x170\x171\x5(\x15\x2\x171"+
		"\x178\b\x1A\x1\x2\x172\x173\aI\x2\x2\x173\x174\x5(\x15\x2\x174\x175\b"+
		"\x1A\x1\x2\x175\x177\x3\x2\x2\x2\x176\x172\x3\x2\x2\x2\x177\x17A\x3\x2"+
		"\x2\x2\x178\x176\x3\x2\x2\x2\x178\x179\x3\x2\x2\x2\x179\x33\x3\x2\x2\x2"+
		"\x17A\x178\x3\x2\x2\x2\x17B\x17C\a\t\x2\x2\x17C\x17D\x5\x36\x1C\x2\x17D"+
		"\x17E\b\x1B\x1\x2\x17E\x35\x3\x2\x2\x2\x17F\x180\x5p\x39\x2\x180\x181"+
		"\b\x1C\x1\x2\x181\x189\x3\x2\x2\x2\x182\x183\x5r:\x2\x183\x184\b\x1C\x1"+
		"\x2\x184\x189\x3\x2\x2\x2\x185\x186\x5\x38\x1D\x2\x186\x187\b\x1C\x1\x2"+
		"\x187\x189\x3\x2\x2\x2\x188\x17F\x3\x2\x2\x2\x188\x182\x3\x2\x2\x2\x188"+
		"\x185\x3\x2\x2\x2\x189\x37\x3\x2\x2\x2\x18A\x18B\x5z>\x2\x18B\x18C\x5"+
		":\x1E\x2\x18C\x18D\b\x1D\x1\x2\x18D\x39\x3\x2\x2\x2\x18E\x18F\ag\x2\x2"+
		"\x18F\x19F\b\x1E\x1\x2\x190\x191\a-\x2\x2\x191\x192\x5\\/\x2\x192\x199"+
		"\b\x1E\x1\x2\x193\x194\a)\x2\x2\x194\x195\x5\\/\x2\x195\x196\b\x1E\x1"+
		"\x2\x196\x198\x3\x2\x2\x2\x197\x193\x3\x2\x2\x2\x198\x19B\x3\x2\x2\x2"+
		"\x199\x197\x3\x2\x2\x2\x199\x19A\x3\x2\x2\x2\x19A\x19C\x3\x2\x2\x2\x19B"+
		"\x199\x3\x2\x2\x2\x19C\x19D\a\x15\x2\x2\x19D\x19F\x3\x2\x2\x2\x19E\x18E"+
		"\x3\x2\x2\x2\x19E\x190\x3\x2\x2\x2\x19F;\x3\x2\x2\x2\x1A0\x1A4\a\x32\x2"+
		"\x2\x1A1\x1A2\x5> \x2\x1A2\x1A3\b\x1F\x1\x2\x1A3\x1A5\x3\x2\x2\x2\x1A4"+
		"\x1A1\x3\x2\x2\x2\x1A4\x1A5\x3\x2\x2\x2\x1A5\x1A6\x3\x2\x2\x2\x1A6\x1A7"+
		"\a\xF\x2\x2\x1A7=\x3\x2\x2\x2\x1A8\x1A9\x5@!\x2\x1A9\x1B0\b \x1\x2\x1AA"+
		"\x1AE\a\x39\x2\x2\x1AB\x1AC\x5> \x2\x1AC\x1AD\b \x1\x2\x1AD\x1AF\x3\x2"+
		"\x2\x2\x1AE\x1AB\x3\x2\x2\x2\x1AE\x1AF\x3\x2\x2\x2\x1AF\x1B1\x3\x2\x2"+
		"\x2\x1B0\x1AA\x3\x2\x2\x2\x1B0\x1B1\x3\x2\x2\x2\x1B1?\x3\x2\x2\x2\x1B2"+
		"\x1B3\x5T+\x2\x1B3\x1B4\x5\x42\"\x2\x1B4\x1B5\b!\x1\x2\x1B5\x1BB\x3\x2"+
		"\x2\x2\x1B6\x1B7\x5L\'\x2\x1B7\x1B8\x5\x44#\x2\x1B8\x1B9\b!\x1\x2\x1B9"+
		"\x1BB\x3\x2\x2\x2\x1BA\x1B2\x3\x2\x2\x2\x1BA\x1B6\x3\x2\x2\x2\x1BB\x41"+
		"\x3\x2\x2\x2\x1BC\x1BD\x5J&\x2\x1BD\x1BE\x5\x46$\x2\x1BE\x1C8\b\"\x1\x2"+
		"\x1BF\x1C4\a<\x2\x2\x1C0\x1C1\x5J&\x2\x1C1\x1C2\x5\x46$\x2\x1C2\x1C3\b"+
		"\"\x1\x2\x1C3\x1C5\x3\x2\x2\x2\x1C4\x1C0\x3\x2\x2\x2\x1C4\x1C5\x3\x2\x2"+
		"\x2\x1C5\x1C7\x3\x2\x2\x2\x1C6\x1BF\x3\x2\x2\x2\x1C7\x1CA\x3\x2\x2\x2"+
		"\x1C8\x1C6\x3\x2\x2\x2\x1C8\x1C9\x3\x2\x2\x2\x1C9\x43\x3\x2\x2\x2\x1CA"+
		"\x1C8\x3\x2\x2\x2\x1CB\x1CC\x5\x42\"\x2\x1CC\x1CD\b#\x1\x2\x1CD\x1CF\x3"+
		"\x2\x2\x2\x1CE\x1CB\x3\x2\x2\x2\x1CE\x1CF\x3\x2\x2\x2\x1CF\x45\x3\x2\x2"+
		"\x2\x1D0\x1D1\x5H%\x2\x1D1\x1D8\b$\x1\x2\x1D2\x1D3\a)\x2\x2\x1D3\x1D4"+
		"\x5H%\x2\x1D4\x1D5\b$\x1\x2\x1D5\x1D7\x3\x2\x2\x2\x1D6\x1D2\x3\x2\x2\x2"+
		"\x1D7\x1DA\x3\x2\x2\x2\x1D8\x1D6\x3\x2\x2\x2\x1D8\x1D9\x3\x2\x2\x2\x1D9"+
		"G\x3\x2\x2\x2\x1DA\x1D8\x3\x2\x2\x2\x1DB\x1DC\x5R*\x2\x1DC\x1DD\b%\x1"+
		"\x2\x1DDI\x3\x2\x2\x2\x1DE\x1DF\x5V,\x2\x1DF\x1E0\b&\x1\x2\x1E0\x1E4\x3"+
		"\x2\x2\x2\x1E1\x1E2\a\x38\x2\x2\x1E2\x1E4\b&\x1\x2\x1E3\x1DE\x3\x2\x2"+
		"\x2\x1E3\x1E1\x3\x2\x2\x2\x1E4K\x3\x2\x2\x2\x1E5\x1E6\x5P)\x2\x1E6\x1E7"+
		"\b\'\x1\x2\x1E7\x1EC\x3\x2\x2\x2\x1E8\x1E9\x5N(\x2\x1E9\x1EA\b\'\x1\x2"+
		"\x1EA\x1EC\x3\x2\x2\x2\x1EB\x1E5\x3\x2\x2\x2\x1EB\x1E8\x3\x2\x2\x2\x1EC"+
		"M\x3\x2\x2\x2\x1ED\x1EE\a\x6\x2\x2\x1EE\x1EF\x5\x42\"\x2\x1EF\x1F0\a&"+
		"\x2\x2\x1F0\x1F1\b(\x1\x2\x1F1O\x3\x2\x2\x2\x1F2\x1F3\a-\x2\x2\x1F3\x1F7"+
		"\b)\x1\x2\x1F4\x1F5\x5R*\x2\x1F5\x1F6\b)\x1\x2\x1F6\x1F8\x3\x2\x2\x2\x1F7"+
		"\x1F4\x3\x2\x2\x2\x1F8\x1F9\x3\x2\x2\x2\x1F9\x1F7\x3\x2\x2\x2\x1F9\x1FA"+
		"\x3\x2\x2\x2\x1FA\x1FB\x3\x2\x2\x2\x1FB\x1FC\a\x15\x2\x2\x1FCQ\x3\x2\x2"+
		"\x2\x1FD\x1FE\x5T+\x2\x1FE\x1FF\b*\x1\x2\x1FF\x202\x3\x2\x2\x2\x200\x202"+
		"\x5L\'\x2\x201\x1FD\x3\x2\x2\x2\x201\x200\x3\x2\x2\x2\x202S\x3\x2\x2\x2"+
		"\x203\x204\x5X-\x2\x204\x205\b+\x1\x2\x205\x20A\x3\x2\x2\x2\x206\x207"+
		"\x5Z.\x2\x207\x208\b+\x1\x2\x208\x20A\x3\x2\x2\x2\x209\x203\x3\x2\x2\x2"+
		"\x209\x206\x3\x2\x2\x2\x20AU\x3\x2\x2\x2\x20B\x20C\x5X-\x2\x20C\x20D\b"+
		",\x1\x2\x20D\x212\x3\x2\x2\x2\x20E\x20F\x5z>\x2\x20F\x210\b,\x1\x2\x210"+
		"\x212\x3\x2\x2\x2\x211\x20B\x3\x2\x2\x2\x211\x20E\x3\x2\x2\x2\x212W\x3"+
		"\x2\x2\x2\x213\x214\aU\x2\x2\x214\x218\b-\x1\x2\x215\x216\aV\x2\x2\x216"+
		"\x218\b-\x1\x2\x217\x213\x3\x2\x2\x2\x217\x215\x3\x2\x2\x2\x218Y\x3\x2"+
		"\x2\x2\x219\x21A\x5z>\x2\x21A\x21B\b.\x1\x2\x21B\x229\x3\x2\x2\x2\x21C"+
		"\x21D\x5x=\x2\x21D\x21E\b.\x1\x2\x21E\x229\x3\x2\x2\x2\x21F\x220\x5|?"+
		"\x2\x220\x221\b.\x1\x2\x221\x229\x3\x2\x2\x2\x222\x223\aM\x2\x2\x223\x229"+
		"\b.\x1\x2\x224\x225\aO\x2\x2\x225\x229\b.\x1\x2\x226\x227\ag\x2\x2\x227"+
		"\x229\b.\x1\x2\x228\x219\x3\x2\x2\x2\x228\x21C\x3\x2\x2\x2\x228\x21F\x3"+
		"\x2\x2\x2\x228\x222\x3\x2\x2\x2\x228\x224\x3\x2\x2\x2\x228\x226\x3\x2"+
		"\x2\x2\x229[\x3\x2\x2\x2\x22A\x22B\x5^\x30\x2\x22B\x22C\b/\x1\x2\x22C"+
		"]\x3\x2\x2\x2\x22D\x22E\x5`\x31\x2\x22E\x235\b\x30\x1\x2\x22F\x230\a\x41"+
		"\x2\x2\x230\x231\x5`\x31\x2\x231\x232\b\x30\x1\x2\x232\x234\x3\x2\x2\x2"+
		"\x233\x22F\x3\x2\x2\x2\x234\x237\x3\x2\x2\x2\x235\x233\x3\x2\x2\x2\x235"+
		"\x236\x3\x2\x2\x2\x236_\x3\x2\x2\x2\x237\x235\x3\x2\x2\x2\x238\x239\x5"+
		"\x62\x32\x2\x239\x240\b\x31\x1\x2\x23A\x23B\a@\x2\x2\x23B\x23C\x5\x62"+
		"\x32\x2\x23C\x23D\b\x31\x1\x2\x23D\x23F\x3\x2\x2\x2\x23E\x23A\x3\x2\x2"+
		"\x2\x23F\x242\x3\x2\x2\x2\x240\x23E\x3\x2\x2\x2\x240\x241\x3\x2\x2\x2"+
		"\x241\x61\x3\x2\x2\x2\x242\x240\x3\x2\x2\x2\x243\x244\x5\x64\x33\x2\x244"+
		"\x245\b\x32\x1\x2\x245\x63\x3\x2\x2\x2\x246\x247\x5\x66\x34\x2\x247\x260"+
		"\b\x33\x1\x2\x248\x249\a\x1B\x2\x2\x249\x24A\x5\x66\x34\x2\x24A\x24B\b"+
		"\x33\x1\x2\x24B\x261\x3\x2\x2\x2\x24C\x24D\a\f\x2\x2\x24D\x24E\x5\x66"+
		"\x34\x2\x24E\x24F\b\x33\x1\x2\x24F\x261\x3\x2\x2\x2\x250\x251\a\n\x2\x2"+
		"\x251\x252\x5\x66\x34\x2\x252\x253\b\x33\x1\x2\x253\x261\x3\x2\x2\x2\x254"+
		"\x255\a\x42\x2\x2\x255\x256\x5\x66\x34\x2\x256\x257\b\x33\x1\x2\x257\x261"+
		"\x3\x2\x2\x2\x258\x259\a\r\x2\x2\x259\x25A\x5\x66\x34\x2\x25A\x25B\b\x33"+
		"\x1\x2\x25B\x261\x3\x2\x2\x2\x25C\x25D\aG\x2\x2\x25D\x25E\x5\x66\x34\x2"+
		"\x25E\x25F\b\x33\x1\x2\x25F\x261\x3\x2\x2\x2\x260\x248\x3\x2\x2\x2\x260"+
		"\x24C\x3\x2\x2\x2\x260\x250\x3\x2\x2\x2\x260\x254\x3\x2\x2\x2\x260\x258"+
		"\x3\x2\x2\x2\x260\x25C\x3\x2\x2\x2\x260\x261\x3\x2\x2\x2\x261\x65\x3\x2"+
		"\x2\x2\x262\x263\x5h\x35\x2\x263\x264\b\x34\x1\x2\x264g\x3\x2\x2\x2\x265"+
		"\x266\x5j\x36\x2\x266\x275\b\x35\x1\x2\x267\x268\a;\x2\x2\x268\x269\x5"+
		"j\x36\x2\x269\x26A\b\x35\x1\x2\x26A\x274\x3\x2\x2\x2\x26B\x26C\a,\x2\x2"+
		"\x26C\x26D\x5j\x36\x2\x26D\x26E\b\x35\x1\x2\x26E\x274\x3\x2\x2\x2\x26F"+
		"\x270\aK\x2\x2\x270\x274\b\x35\x1\x2\x271\x272\aL\x2\x2\x272\x274\b\x35"+
		"\x1\x2\x273\x267\x3\x2\x2\x2\x273\x26B\x3\x2\x2\x2\x273\x26F\x3\x2\x2"+
		"\x2\x273\x271\x3\x2\x2\x2\x274\x277\x3\x2\x2\x2\x275\x273\x3\x2\x2\x2"+
		"\x275\x276\x3\x2\x2\x2\x276i\x3\x2\x2\x2\x277\x275\x3\x2\x2\x2\x278\x279"+
		"\x5l\x37\x2\x279\x284\b\x36\x1\x2\x27A\x27B\a\b\x2\x2\x27B\x27C\x5l\x37"+
		"\x2\x27C\x27D\b\x36\x1\x2\x27D\x283\x3\x2\x2\x2\x27E\x27F\a\x46\x2\x2"+
		"\x27F\x280\x5l\x37\x2\x280\x281\b\x36\x1\x2\x281\x283\x3\x2\x2\x2\x282"+
		"\x27A\x3\x2\x2\x2\x282\x27E\x3\x2\x2\x2\x283\x286\x3\x2\x2\x2\x284\x282"+
		"\x3\x2\x2\x2\x284\x285\x3\x2\x2\x2\x285k\x3\x2\x2\x2\x286\x284\x3\x2\x2"+
		"\x2\x287\x288\a$\x2\x2\x288\x289\x5n\x38\x2\x289\x28A\b\x37\x1\x2\x28A"+
		"\x297\x3\x2\x2\x2\x28B\x28C\a;\x2\x2\x28C\x28D\x5n\x38\x2\x28D\x28E\b"+
		"\x37\x1\x2\x28E\x297\x3\x2\x2\x2\x28F\x290\a,\x2\x2\x290\x291\x5n\x38"+
		"\x2\x291\x292\b\x37\x1\x2\x292\x297\x3\x2\x2\x2\x293\x294\x5n\x38\x2\x294"+
		"\x295\b\x37\x1\x2\x295\x297\x3\x2\x2\x2\x296\x287\x3\x2\x2\x2\x296\x28B"+
		"\x3\x2\x2\x2\x296\x28F\x3\x2\x2\x2\x296\x293\x3\x2\x2\x2\x297m\x3\x2\x2"+
		"\x2\x298\x299\x5p\x39\x2\x299\x29A\b\x38\x1\x2\x29A\x2AD\x3\x2\x2\x2\x29B"+
		"\x29C\x5r:\x2\x29C\x29D\b\x38\x1\x2\x29D\x2AD\x3\x2\x2\x2\x29E\x29F\x5"+
		"v<\x2\x29F\x2A0\b\x38\x1\x2\x2A0\x2AD\x3\x2\x2\x2\x2A1\x2A2\x5x=\x2\x2A2"+
		"\x2A3\b\x38\x1\x2\x2A3\x2AD\x3\x2\x2\x2\x2A4\x2A5\x5|?\x2\x2A5\x2A6\b"+
		"\x38\x1\x2\x2A6\x2AD\x3\x2\x2\x2\x2A7\x2A8\aM\x2\x2\x2A8\x2AD\b\x38\x1"+
		"\x2\x2A9\x2AA\x5X-\x2\x2AA\x2AB\b\x38\x1\x2\x2AB\x2AD\x3\x2\x2\x2\x2AC"+
		"\x298\x3\x2\x2\x2\x2AC\x29B\x3\x2\x2\x2\x2AC\x29E\x3\x2\x2\x2\x2AC\x2A1"+
		"\x3\x2\x2\x2\x2AC\x2A4\x3\x2\x2\x2\x2AC\x2A7\x3\x2\x2\x2\x2AC\x2A9\x3"+
		"\x2\x2\x2\x2ADo\x3\x2\x2\x2\x2AE\x2AF\a-\x2\x2\x2AF\x2B0\x5\\/\x2\x2B0"+
		"\x2B1\a\x15\x2\x2\x2B1\x2B2\b\x39\x1\x2\x2B2q\x3\x2\x2\x2\x2B3\x2B4\t"+
		"\x2\x2\x2\x2B4\x2B5\a-\x2\x2\x2B5\x2B6\x5\\/\x2\x2B6\x2B7\a\x15\x2\x2"+
		"\x2B7\x2B8\b:\x1\x2\x2B8\x2F7\x3\x2\x2\x2\x2B9\x2BA\t\x3\x2\x2\x2BA\x2BB"+
		"\a-\x2\x2\x2BB\x2BC\x5\\/\x2\x2BC\x2BD\a\x15\x2\x2\x2BD\x2BE\b:\x1\x2"+
		"\x2BE\x2F7\x3\x2\x2\x2\x2BF\x2C0\t\x4\x2\x2\x2C0\x2C1\a-\x2\x2\x2C1\x2C2"+
		"\x5\\/\x2\x2C2\x2C3\a)\x2\x2\x2C3\x2C4\x5\\/\x2\x2C4\x2C5\a\x15\x2\x2"+
		"\x2C5\x2C6\b:\x1\x2\x2C6\x2F7\x3\x2\x2\x2\x2C7\x2C8\t\x5\x2\x2\x2C8\x2C9"+
		"\a-\x2\x2\x2C9\x2CA\x5\\/\x2\x2CA\x2CB\a\x15\x2\x2\x2CB\x2CC\b:\x1\x2"+
		"\x2CC\x2F7\x3\x2\x2\x2\x2CD\x2CE\t\x6\x2\x2\x2CE\x2CF\a-\x2\x2\x2CF\x2D0"+
		"\x5X-\x2\x2D0\x2D1\a\x15\x2\x2\x2D1\x2D2\b:\x1\x2\x2D2\x2F7\x3\x2\x2\x2"+
		"\x2D3\x2D4\a\"\x2\x2\x2D4\x2D5\a-\x2\x2\x2D5\x2D6\x5\\/\x2\x2D6\x2D7\a"+
		")\x2\x2\x2D7\x2D8\x5\\/\x2\x2D8\x2D9\a\x15\x2\x2\x2D9\x2DA\b:\x1\x2\x2DA"+
		"\x2F7\x3\x2\x2\x2\x2DB\x2DC\a\v\x2\x2\x2DC\x2DD\a-\x2\x2\x2DD\x2DE\x5"+
		"\\/\x2\x2DE\x2DF\a\x15\x2\x2\x2DF\x2E0\b:\x1\x2\x2E0\x2F7\x3\x2\x2\x2"+
		"\x2E1\x2E2\a\x31\x2\x2\x2E2\x2E3\a-\x2\x2\x2E3\x2E4\x5\\/\x2\x2E4\x2E5"+
		"\a\x15\x2\x2\x2E5\x2E6\b:\x1\x2\x2E6\x2F7\x3\x2\x2\x2\x2E7\x2E8\a\x4\x2"+
		"\x2\x2E8\x2E9\a-\x2\x2\x2E9\x2EA\x5\\/\x2\x2EA\x2EB\a\x15\x2\x2\x2EB\x2EC"+
		"\b:\x1\x2\x2EC\x2F7\x3\x2\x2\x2\x2ED\x2EE\a\x34\x2\x2\x2EE\x2EF\a-\x2"+
		"\x2\x2EF\x2F0\x5\\/\x2\x2F0\x2F1\a\x15\x2\x2\x2F1\x2F2\b:\x1\x2\x2F2\x2F7"+
		"\x3\x2\x2\x2\x2F3\x2F4\x5t;\x2\x2F4\x2F5\b:\x1\x2\x2F5\x2F7\x3\x2\x2\x2"+
		"\x2F6\x2B3\x3\x2\x2\x2\x2F6\x2B9\x3\x2\x2\x2\x2F6\x2BF\x3\x2\x2\x2\x2F6"+
		"\x2C7\x3\x2\x2\x2\x2F6\x2CD\x3\x2\x2\x2\x2F6\x2D3\x3\x2\x2\x2\x2F6\x2DB"+
		"\x3\x2\x2\x2\x2F6\x2E1\x3\x2\x2\x2\x2F6\x2E7\x3\x2\x2\x2\x2F6\x2ED\x3"+
		"\x2\x2\x2\x2F6\x2F3\x3\x2\x2\x2\x2F7s\x3\x2\x2\x2\x2F8\x2F9\t\a\x2\x2"+
		"\x2F9\x2FA\a-\x2\x2\x2FA\x2FB\x5\\/\x2\x2FB\x2FC\a)\x2\x2\x2FC\x2FF\x5"+
		"\\/\x2\x2FD\x2FE\a)\x2\x2\x2FE\x300\x5\\/\x2\x2FF\x2FD\x3\x2\x2\x2\x2FF"+
		"\x300\x3\x2\x2\x2\x300\x301\x3\x2\x2\x2\x301\x302\a\x15\x2\x2\x302\x303"+
		"\b;\x1\x2\x303u\x3\x2\x2\x2\x304\x305\x5z>\x2\x305\x309\b<\x1\x2\x306"+
		"\x307\x5:\x1E\x2\x307\x308\b<\x1\x2\x308\x30A\x3\x2\x2\x2\x309\x306\x3"+
		"\x2\x2\x2\x309\x30A\x3\x2\x2\x2\x30Aw\x3\x2\x2\x2\x30B\x30C\aN\x2\x2\x30C"+
		"\x313\b=\x1\x2\x30D\x30E\aW\x2\x2\x30E\x314\b=\x1\x2\x30F\x310\a\x10\x2"+
		"\x2\x310\x311\x5z>\x2\x311\x312\b=\x1\x2\x312\x314\x3\x2\x2\x2\x313\x30D"+
		"\x3\x2\x2\x2\x313\x30F\x3\x2\x2\x2\x313\x314\x3\x2\x2\x2\x314y\x3\x2\x2"+
		"\x2\x315\x316\aP\x2\x2\x316\x31A\b>\x1\x2\x317\x318\aR\x2\x2\x318\x31A"+
		"\b>\x1\x2\x319\x315\x3\x2\x2\x2\x319\x317\x3\x2\x2\x2\x31A{\x3\x2\x2\x2"+
		"\x31B\x31F\x5~@\x2\x31C\x31F\aK\x2\x2\x31D\x31F\aL\x2\x2\x31E\x31B\x3"+
		"\x2\x2\x2\x31E\x31C\x3\x2\x2\x2\x31E\x31D\x3\x2\x2\x2\x31F}\x3\x2\x2\x2"+
		"\x320\x321\t\b\x2\x2\x321\x7F\x3\x2\x2\x2\x45\x85\x8A\x8F\xA0\xA7\xAB"+
		"\xB0\xBB\xC9\xCD\xD2\xD6\xDE\xE7\xF2\xFA\xFF\x106\x10D\x10F\x119\x11F"+
		"\x12A\x12C\x13A\x142\x145\x14A\x14E\x159\x15B\x166\x178\x188\x199\x19E"+
		"\x1A4\x1AE\x1B0\x1BA\x1C4\x1C8\x1CE\x1D8\x1E3\x1EB\x1F9\x201\x209\x211"+
		"\x217\x228\x235\x240\x260\x273\x275\x282\x284\x296\x2AC\x2F6\x2FF\x309"+
		"\x313\x319\x31E";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace ANTLR_Test
